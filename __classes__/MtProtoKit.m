//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct in6_addr {
    union {
        unsigned char _field1[16];
        unsigned short _field2[8];
        unsigned int _field3[4];
    } _field1;
};

struct in_addr {
    unsigned int _field1;
};

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct sockaddr_in6 {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    unsigned int _field4;
    struct in6_addr _field5;
    unsigned int _field6;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned char _field1[16];
} CDStruct_60067b7e;

typedef struct {
    long long _field1;
    int _field2;
} CDStruct_87dc826d;

#pragma mark -

//
// File: MtProtoKit
// UUID: 16CE5E66-3DAB-BC1B-C045-399A69D1F11F
//
//                           Arch: arm64
//                Current version: 0.0.0
//          Compatibility version: 0.0.0
//                 Source version: 0.0.0.0.0
//            Minimum iOS version: 9.0.0
//                    SDK version: 13.2.0
//
// Objective-C Garbage Collection: Unsupported
//

@protocol GCDAsyncSocketDelegate

@optional
- (void)socketDidSecure:(GCDAsyncSocket *)arg1;
- (void)socketDidDisconnect:(GCDAsyncSocket *)arg1 withError:(NSError *)arg2;
- (void)socketDidCloseReadStream:(GCDAsyncSocket *)arg1;
- (double)socket:(GCDAsyncSocket *)arg1 shouldTimeoutWriteWithTag:(long long)arg2 elapsed:(double)arg3 bytesDone:(unsigned long long)arg4;
- (double)socket:(GCDAsyncSocket *)arg1 shouldTimeoutReadWithTag:(long long)arg2 elapsed:(double)arg3 bytesDone:(unsigned long long)arg4;
- (void)socket:(GCDAsyncSocket *)arg1 didWritePartialDataOfLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)socket:(GCDAsyncSocket *)arg1 didWriteDataWithTag:(long long)arg2;
- (void)socket:(GCDAsyncSocket *)arg1 didReadPartialDataOfLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)socket:(GCDAsyncSocket *)arg1 didReadData:(NSData *)arg2 withTag:(long long)arg3;
- (void)socket:(GCDAsyncSocket *)arg1 didConnectToHost:(NSString *)arg2 port:(unsigned short)arg3;
- (void)socket:(GCDAsyncSocket *)arg1 didAcceptNewSocket:(GCDAsyncSocket *)arg2;
- (NSObject<OS_dispatch_queue> *)newSocketQueueForConnectionFromAddress:(NSData *)arg1 onSocket:(GCDAsyncSocket *)arg2;
@end

@protocol MTContextChangeListener <NSObject>

@optional
- (void)contextLoggedOut:(MTContext *)arg1;
- (MTSignal *)isContextNetworkAccessAllowed:(MTContext *)arg1;
- (void)contextApiEnvironmentUpdated:(MTContext *)arg1 apiEnvironment:(MTApiEnvironment *)arg2;
- (MTSignal *)fetchContextDatacenterPublicKeys:(MTContext *)arg1 datacenterId:(long long)arg2;
- (void)contextDatacenterPublicKeysUpdated:(MTContext *)arg1 datacenterId:(long long)arg2 publicKeys:(NSArray *)arg3;
- (void)contextIsPasswordRequiredUpdated:(MTContext *)arg1 datacenterId:(long long)arg2;
- (void)contextDatacenterTransportSchemesUpdated:(MTContext *)arg1 datacenterId:(long long)arg2 shouldReset:(_Bool)arg3;
- (void)contextDatacenterAuthTokenUpdated:(MTContext *)arg1 datacenterId:(long long)arg2 authToken:(id)arg3;
- (void)contextDatacenterAuthInfoUpdated:(MTContext *)arg1 datacenterId:(long long)arg2 authInfo:(MTDatacenterAuthInfo *)arg3;
- (void)contextDatacenterAddressSetUpdated:(MTContext *)arg1 datacenterId:(long long)arg2 addressSet:(MTDatacenterAddressSet *)arg3;
@end

@protocol MTDatacenterAuthActionDelegate <NSObject>
- (void)datacenterAuthActionCompleted:(MTDatacenterAuthAction *)arg1;
@end

@protocol MTDatacenterAuthMessageServiceDelegate <NSObject>
- (void)authMessageServiceCompletedWithAuthKey:(MTDatacenterAuthKey *)arg1 timestamp:(long long)arg2;
@end

@protocol MTDatacenterTransferAuthActionDelegate <NSObject>
- (void)datacenterTransferAuthActionCompleted:(MTDatacenterTransferAuthAction *)arg1;
@end

@protocol MTDiscoverDatacenterAddressActionDelegate <NSObject>
- (void)discoverDatacenterAddressActionCompleted:(MTDiscoverDatacenterAddressAction *)arg1;
@end

@protocol MTDisposable <NSObject>
- (void)dispose;
@end

@protocol MTKeychain <NSObject>
- (void)dropGroup:(NSString *)arg1;
- (void)removeObjectForKey:(NSString *)arg1 group:(NSString *)arg2;
- (id)objectForKey:(NSString *)arg1 group:(NSString *)arg2;
- (void)setObject:(id)arg1 forKey:(NSString *)arg2 group:(NSString *)arg3;
@end

@protocol MTMessageService <NSObject>

@optional
- (void)mtProtoApiEnvironmentUpdated:(MTProto *)arg1 apiEnvironment:(MTApiEnvironment *)arg2;
- (void)mtProtoAuthTokenUpdated:(MTProto *)arg1;
- (void)mtProtoServiceTasksStateChanged:(MTProto *)arg1 isPerformingServiceTasks:(_Bool)arg2;
- (void)mtProtoConnectionContextUpdateStateChanged:(MTProto *)arg1 isUpdatingConnectionContext:(_Bool)arg2;
- (void)mtProtoConnectionStateChanged:(MTProto *)arg1 isConnected:(_Bool)arg2;
- (void)mtProtoNetworkAvailabilityChanged:(MTProto *)arg1 isNetworkAvailable:(_Bool)arg2;
- (void)mtProto:(MTProto *)arg1 updateReceiveProgressForToken:(id)arg2 progress:(float)arg3 packetLength:(long long)arg4;
- (_Bool)mtProto:(MTProto *)arg1 shouldRequestMessageWithId:(long long)arg2 inResponseToMessageId:(long long)arg3 currentTransactionId:(id)arg4;
- (void)mtProto:(MTProto *)arg1 protocolErrorReceived:(int)arg2;
- (void)mtProto:(MTProto *)arg1 messageResendRequestFailed:(long long)arg2;
- (void)mtProto:(MTProto *)arg1 messageDeliveryConfirmed:(NSArray *)arg2;
- (void)mtProto:(MTProto *)arg1 messageDeliveryFailed:(long long)arg2;
- (void)mtProtoAllTransactionsMayHaveFailed:(MTProto *)arg1;
- (void)mtProto:(MTProto *)arg1 transactionsMayHaveFailed:(NSArray *)arg2;
- (void)mtProto:(MTProto *)arg1 receivedQuickAck:(int)arg2;
- (void)mtProto:(MTProto *)arg1 receivedMessage:(MTIncomingMessage *)arg2;
- (void)mtProtoServerDidChangeSession:(MTProto *)arg1 firstValidMessageId:(long long)arg2 otherValidMessageIds:(NSArray *)arg3;
- (void)mtProtoDidChangeSession:(MTProto *)arg1;
- (MTMessageTransaction *)mtProtoMessageTransaction:(MTProto *)arg1;
- (void)mtProtoPublicKeysUpdated:(MTProto *)arg1 datacenterId:(long long)arg2 publicKeys:(NSArray *)arg3;
- (void)mtProtoDidRemoveService:(MTProto *)arg1;
- (void)mtProtoDidAddService:(MTProto *)arg1;
- (void)mtProtoWillAddService:(MTProto *)arg1;
@end

@protocol MTNetworkAvailabilityDelegate <NSObject>

@optional
- (void)networkAvailabilityChanged:(MTNetworkAvailability *)arg1 networkIsAvailable:(_Bool)arg2;
@end

@protocol MTResendMessageServiceDelegate <NSObject>

@optional
- (void)resendMessageServiceCompleted:(MTResendMessageService *)arg1;
@end

@protocol MTTcpConnectionBehaviourDelegate <NSObject>

@optional
- (void)tcpConnectionBehaviourRequestsReconnection:(MTTcpConnectionBehaviour *)arg1 error:(_Bool)arg2;
@end

@protocol MTTcpConnectionDelegate <NSObject>

@optional
- (void)tcpConnectionProgressUpdated:(MTTcpConnection *)arg1 packetProgressToken:(id)arg2 packetLength:(unsigned long long)arg3 progress:(float)arg4;
- (void)tcpConnectionDecodePacketProgressToken:(MTTcpConnection *)arg1 data:(NSData *)arg2 token:(long long)arg3 completion:(void (^)(long long, id))arg4;
- (void)tcpConnectionReceivedQuickAck:(MTTcpConnection *)arg1 quickAck:(int)arg2;
- (void)tcpConnectionReceivedData:(MTTcpConnection *)arg1 data:(NSData *)arg2;
- (void)tcpConnectionClosed:(MTTcpConnection *)arg1 error:(_Bool)arg2;
- (void)tcpConnectionOpened:(MTTcpConnection *)arg1;
@end

@protocol MTTimeSyncMessageServiceDelegate <NSObject>

@optional
- (void)timeSyncServiceCompleted:(MTTimeSyncMessageService *)arg1 timeDifference:(double)arg2 saltList:(NSArray *)arg3;
@end

@protocol MTTransportDelegate <NSObject>

@optional
- (void)transportUpdatedDataReceiveProgress:(MTTransport *)arg1 progressToken:(id)arg2 packetLength:(long long)arg3 progress:(float)arg4;
- (void)transportDecodeProgressToken:(MTTransport *)arg1 scheme:(MTTransportScheme *)arg2 data:(NSData *)arg3 token:(long long)arg4 completion:(void (^)(long long, id))arg5;
- (void)transportReceivedQuickAck:(MTTransport *)arg1 quickAckId:(int)arg2;
- (void)transportTransactionsMayHaveFailed:(MTTransport *)arg1 transactionIds:(NSArray *)arg2;
- (void)transportHasIncomingData:(MTTransport *)arg1 scheme:(MTTransportScheme *)arg2 data:(NSData *)arg3 transactionId:(id)arg4 requestTransactionAfterProcessing:(_Bool)arg5 decodeResult:(void (^)(id, _Bool))arg6;
- (void)transportReadyForTransaction:(MTTransport *)arg1 scheme:(MTTransportScheme *)arg2 transportSpecificTransaction:(MTMessageTransaction *)arg3 forceConfirmations:(_Bool)arg4 transactionReady:(void (^)(NSArray *))arg5;
- (void)transportConnectionProblemsStatusChanged:(MTTransport *)arg1 scheme:(MTTransportScheme *)arg2 hasConnectionProblems:(_Bool)arg3 isProbablyHttp:(_Bool)arg4;
- (void)transportConnectionContextUpdateStateChanged:(MTTransport *)arg1 isUpdatingConnectionContext:(_Bool)arg2;
- (void)transportConnectionFailed:(MTTransport *)arg1 scheme:(MTTransportScheme *)arg2;
- (void)transportConnectionStateChanged:(MTTransport *)arg1 isConnected:(_Bool)arg2 proxySettings:(MTSocksProxySettings *)arg3;
- (void)transportNetworkAvailabilityChanged:(MTTransport *)arg1 isNetworkAvailable:(_Bool)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (_Bool)respondsToSelector:(SEL)arg1;
- (_Bool)conformsToProtocol:(Protocol *)arg1;
- (_Bool)isMemberOfClass:(Class)arg1;
- (_Bool)isKindOfClass:(Class)arg1;
- (_Bool)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (_Bool)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol PingFoundationDelegate <NSObject>

@optional
- (void)pingFoundation:(PingFoundation *)arg1 didReceiveUnexpectedPacket:(NSData *)arg2;
- (void)pingFoundation:(PingFoundation *)arg1 didReceivePingResponsePacket:(NSData *)arg2 sequenceNumber:(unsigned short)arg3;
- (void)pingFoundation:(PingFoundation *)arg1 didFailToSendPacket:(NSData *)arg2 sequenceNumber:(unsigned short)arg3 error:(NSError *)arg4;
- (void)pingFoundation:(PingFoundation *)arg1 didSendPacket:(NSData *)arg2 sequenceNumber:(unsigned short)arg3;
- (void)pingFoundation:(PingFoundation *)arg1 didFailWithError:(NSError *)arg2;
- (void)pingFoundation:(PingFoundation *)arg1 didStartWithAddress:(NSData *)arg2;
@end

@interface AFHTTPRequestOperation : AFURLConnectionOperation
{
    NSIndexSet *_acceptableStatusCodes;
    NSSet *_acceptableContentTypes;
    NSError *_HTTPError;
    NSObject<OS_dispatch_queue> *_successCallbackQueue;
    NSObject<OS_dispatch_queue> *_failureCallbackQueue;
    NSObject<OS_dispatch_group> *_dispatchGroup;
    long long _onceToken;
    NSObject<OS_dispatch_semaphore> *_dispatchSemaphore;
}

+ (_Bool)canProcessRequest:(id)arg1;
@property(retain) NSObject<OS_dispatch_semaphore> *dispatchSemaphore; // @synthesize dispatchSemaphore=_dispatchSemaphore;
@property(nonatomic) long long onceToken; // @synthesize onceToken=_onceToken;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *failureCallbackQueue; // @synthesize failureCallbackQueue=_failureCallbackQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *successCallbackQueue; // @synthesize successCallbackQueue=_successCallbackQueue;
@property(retain, nonatomic) NSError *HTTPError; // @synthesize HTTPError=_HTTPError;
@property(retain, nonatomic) NSSet *acceptableContentTypes; // @synthesize acceptableContentTypes=_acceptableContentTypes;
@property(retain, nonatomic) NSIndexSet *acceptableStatusCodes; // @synthesize acceptableStatusCodes=_acceptableStatusCodes;
- (void).cxx_destruct;
- (void)setCompletionBlockWithSuccess:(CDUnknownBlockType)arg1 failure:(CDUnknownBlockType)arg2;
- (void)setCompletionBlock:(CDUnknownBlockType)arg1;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *dispatchGroup; // @synthesize dispatchGroup=_dispatchGroup;
@property(readonly) _Bool hasAcceptableContentType;
@property(readonly) _Bool hasAcceptableStatusCode;
- (id)error;
@property(readonly, nonatomic) NSHTTPURLResponse *response;
- (id)initWithRequest:(id)arg1;

@end

@interface AFURLConnectionOperation : NSOperation
{
    _Bool _cancelled;
    unsigned short _state;
    NSURLConnection *_connection;
    NSSet *_runLoopModes;
    NSURLRequest *_request;
    NSURLResponse *_response;
    NSError *_error;
    NSData *_responseData;
    NSString *_responseString;
    long long _totalBytesRead;
    NSMutableData *_dataAccumulator;
    NSOutputStream *_outputStream;
    CDUnknownBlockType _uploadProgress;
    CDUnknownBlockType _downloadProgress;
    CDUnknownBlockType _authenticationAgainstProtectionSpace;
    CDUnknownBlockType _authenticationChallenge;
    CDUnknownBlockType _cacheResponse;
    NSRecursiveLock *_lock;
}

+ (id)networkRequestThread;
+ (void)networkRequestThreadEntryPoint:(id)arg1;
@property(retain, nonatomic) NSRecursiveLock *lock; // @synthesize lock=_lock;
@property(copy, nonatomic) CDUnknownBlockType cacheResponse; // @synthesize cacheResponse=_cacheResponse;
@property(copy, nonatomic) CDUnknownBlockType authenticationChallenge; // @synthesize authenticationChallenge=_authenticationChallenge;
@property(copy, nonatomic) CDUnknownBlockType authenticationAgainstProtectionSpace; // @synthesize authenticationAgainstProtectionSpace=_authenticationAgainstProtectionSpace;
@property(copy, nonatomic) CDUnknownBlockType downloadProgress; // @synthesize downloadProgress=_downloadProgress;
@property(copy, nonatomic) CDUnknownBlockType uploadProgress; // @synthesize uploadProgress=_uploadProgress;
@property(retain, nonatomic) NSOutputStream *outputStream; // @synthesize outputStream=_outputStream;
@property(retain, nonatomic) NSMutableData *dataAccumulator; // @synthesize dataAccumulator=_dataAccumulator;
@property(nonatomic) long long totalBytesRead; // @synthesize totalBytesRead=_totalBytesRead;
@property(copy, nonatomic) NSString *responseString; // @synthesize responseString=_responseString;
@property(retain, nonatomic) NSData *responseData; // @synthesize responseData=_responseData;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSURLResponse *response; // @synthesize response=_response;
@property(retain, nonatomic) NSURLRequest *request; // @synthesize request=_request;
@property(retain, nonatomic) NSSet *runLoopModes; // @synthesize runLoopModes=_runLoopModes;
@property(retain, nonatomic) NSURLConnection *connection; // @synthesize connection=_connection;
@property(nonatomic, getter=isCancelled) _Bool cancelled; // @synthesize cancelled=_cancelled;
@property(nonatomic) unsigned short state; // @synthesize state=_state;
- (void).cxx_destruct;
- (id)connection:(id)arg1 willCacheResponse:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (_Bool)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)cancelConnection;
- (void)cancel;
- (void)finish;
- (void)operationDidStart;
- (void)start;
- (_Bool)isConcurrent;
- (_Bool)isFinished;
- (_Bool)isExecuting;
- (_Bool)isReady;
- (void)setCacheResponseBlock:(CDUnknownBlockType)arg1;
- (void)setAuthenticationChallengeBlock:(CDUnknownBlockType)arg1;
- (void)setAuthenticationAgainstProtectionSpaceBlock:(CDUnknownBlockType)arg1;
- (void)setDownloadProgressBlock:(CDUnknownBlockType)arg1;
- (void)setUploadProgressBlock:(CDUnknownBlockType)arg1;
@property(retain, nonatomic) NSInputStream *inputStream; // @dynamic inputStream;
- (void)setCompletionBlock:(CDUnknownBlockType)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithRequest:(id)arg1;

@end

@interface GCDAsyncSocketPreBuffer : NSObject
{
    char *preBuffer;
    unsigned long long preBufferSize;
    char *readPointer;
    char *writePointer;
}

- (void)reset;
- (void)didWrite:(unsigned long long)arg1;
- (void)getWriteBuffer:(char **)arg1 availableSpace:(unsigned long long *)arg2;
- (char *)writeBuffer;
- (unsigned long long)availableSpace;
- (void)didRead:(unsigned long long)arg1;
- (void)getReadBuffer:(char **)arg1 availableBytes:(unsigned long long *)arg2;
- (char *)readBuffer;
- (unsigned long long)availableBytes;
- (void)ensureCapacityForWrite:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithCapacity:(unsigned long long)arg1;

@end

@interface GCDAsyncReadPacket : NSObject
{
    NSMutableData *buffer;
    unsigned long long startOffset;
    unsigned long long bytesDone;
    unsigned long long maxLength;
    double timeout;
    unsigned long long readLength;
    NSData *term;
    _Bool bufferOwner;
    unsigned long long originalBufferLength;
    long long tag;
}

- (void).cxx_destruct;
- (long long)searchForTermAfterPreBuffering:(long long)arg1;
- (unsigned long long)readLengthForTermWithPreBuffer:(id)arg1 found:(_Bool *)arg2;
- (unsigned long long)readLengthForTermWithHint:(unsigned long long)arg1 shouldPreBuffer:(_Bool *)arg2;
- (unsigned long long)readLengthForNonTermWithHint:(unsigned long long)arg1;
- (unsigned long long)optimalReadLengthWithDefault:(unsigned long long)arg1 shouldPreBuffer:(_Bool *)arg2;
- (void)ensureCapacityForAdditionalDataOfLength:(unsigned long long)arg1;
- (id)initWithData:(id)arg1 startOffset:(unsigned long long)arg2 maxLength:(unsigned long long)arg3 timeout:(double)arg4 readLength:(unsigned long long)arg5 terminator:(id)arg6 tag:(long long)arg7;

@end

@interface GCDAsyncWritePacket : NSObject
{
    NSData *buffer;
    unsigned long long bytesDone;
    long long tag;
    double timeout;
}

- (void).cxx_destruct;
- (id)initWithData:(id)arg1 timeout:(double)arg2 tag:(long long)arg3;

@end

@interface GCDAsyncSpecialPacket : NSObject
{
    NSDictionary *tlsSettings;
}

- (void).cxx_destruct;
- (id)initWithTLSSettings:(id)arg1;

@end

@interface GCDAsyncSocket : NSObject
{
    unsigned int flags;
    unsigned short config;
    id delegate;
    NSObject<OS_dispatch_queue> *delegateQueue;
    int socket4FD;
    int socket6FD;
    int connectIndex;
    NSData *connectInterface4;
    NSData *connectInterface6;
    NSObject<OS_dispatch_queue> *socketQueue;
    NSObject<OS_dispatch_source> *accept4Source;
    NSObject<OS_dispatch_source> *accept6Source;
    NSObject<OS_dispatch_source> *connectTimer;
    NSObject<OS_dispatch_source> *readSource;
    NSObject<OS_dispatch_source> *writeSource;
    NSObject<OS_dispatch_source> *readTimer;
    NSObject<OS_dispatch_source> *writeTimer;
    NSMutableArray *readQueue;
    NSMutableArray *writeQueue;
    GCDAsyncReadPacket *currentRead;
    GCDAsyncWritePacket *currentWrite;
    unsigned long long socketFDBytesAvailable;
    GCDAsyncSocketPreBuffer *preBuffer;
    struct {
        long long version;
        void *info;
        CDUnknownFunctionPointerType retain;
        CDUnknownFunctionPointerType release;
        CDUnknownFunctionPointerType copyDescription;
    } streamContext;
    struct __CFReadStream *readStream;
    struct __CFWriteStream *writeStream;
    struct SSLContext *sslContext;
    GCDAsyncSocketPreBuffer *sslPreBuffer;
    unsigned long long sslWriteCachedLength;
    int sslErrCode;
    id userData;
    MTNetworkUsageManager *_usageManager;
    int _interface;
    _Bool _useTcpNodelay;
    MTNetworkUsageCalculationInfo *_usageCalculationInfo;
}

+ (id)ZeroData;
+ (id)LFData;
+ (id)CRData;
+ (id)CRLFData;
+ (_Bool)getHost:(id *)arg1 port:(unsigned short *)arg2 fromAddress:(id)arg3;
+ (unsigned short)portFromAddress:(id)arg1;
+ (id)hostFromAddress:(id)arg1;
+ (unsigned short)portFromSockaddr6:(const struct sockaddr_in6 *)arg1;
+ (unsigned short)portFromSockaddr4:(const struct sockaddr_in *)arg1;
+ (id)hostFromSockaddr6:(const struct sockaddr_in6 *)arg1;
+ (id)hostFromSockaddr4:(const struct sockaddr_in *)arg1;
+ (void)unscheduleCFStreams:(id)arg1;
+ (void)scheduleCFStreams:(id)arg1;
+ (void)cfstreamThread;
+ (void)startCFStreamThreadIfNeeded;
@property(retain, nonatomic) MTNetworkUsageCalculationInfo *usageCalculationInfo; // @synthesize usageCalculationInfo=_usageCalculationInfo;
@property(nonatomic) _Bool useTcpNodelay; // @synthesize useTcpNodelay=_useTcpNodelay;
- (void).cxx_destruct;
- (_Bool)enableBackgroundingOnSocketWithCaveat;
- (_Bool)enableBackgroundingOnSocket;
- (_Bool)enableBackgroundingOnSocketWithCaveat:(_Bool)arg1;
- (struct __CFWriteStream *)writeStream;
- (struct __CFReadStream *)readStream;
- (int)socket6FD;
- (int)socket4FD;
- (int)socketFD;
- (void)performBlock:(CDUnknownBlockType)arg1;
- (_Bool)openStreams;
- (void)removeStreamsFromRunLoop;
- (_Bool)addStreamsToRunLoop;
- (_Bool)registerForStreamCallbacksIncludingReadWrite:(_Bool)arg1;
- (_Bool)createReadAndWriteStream;
- (void)cf_startTLS;
- (void)cf_abortSSLHandshake:(id)arg1;
- (void)cf_finishSSLHandshake;
- (void)ssl_continueSSLHandshake;
- (void)ssl_startTLS;
- (int)sslWriteWithBuffer:(const void *)arg1 length:(unsigned long long *)arg2;
- (int)sslReadWithBuffer:(void *)arg1 length:(unsigned long long *)arg2;
- (void)maybeStartTLS;
- (void)startTLS:(id)arg1;
- (void)doWriteTimeoutWithExtension:(double)arg1;
- (void)doWriteTimeout;
- (void)setupWriteTimerWithTimeout:(double)arg1;
- (void)endCurrentWrite;
- (void)completeCurrentWrite;
- (void)doWriteData;
- (void)maybeDequeueWrite;
- (float)progressOfWriteReturningTag:(long long *)arg1 bytesDone:(unsigned long long *)arg2 total:(unsigned long long *)arg3;
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)doReadTimeoutWithExtension:(double)arg1;
- (void)doReadTimeout;
- (void)setupReadTimerWithTimeout:(double)arg1;
- (void)endCurrentRead;
- (void)completeCurrentRead;
- (void)doReadEOF;
- (void)doReadData;
- (void)flushSSLBuffers;
- (void)maybeDequeueRead;
- (float)progressOfReadReturningTag:(long long *)arg1 bytesDone:(unsigned long long *)arg2 total:(unsigned long long *)arg3;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 maxLength:(unsigned long long)arg5 tag:(long long)arg6;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(unsigned long long)arg3 tag:(long long)arg4;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 tag:(long long)arg3;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4 tag:(long long)arg5;
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 tag:(long long)arg4;
- (void)readDataWithTimeout:(double)arg1 tag:(long long)arg2;
- (void)resumeWriteSource;
- (void)suspendWriteSource;
- (void)resumeReadSource;
- (void)suspendReadSource;
- (_Bool)usingSecureTransportForTLS;
- (_Bool)usingCFStreamForTLS;
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)arg1;
- (void)getInterfaceAddress4:(id *)arg1 address6:(id *)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4;
- (_Bool)isSecure;
- (_Bool)isIPv6;
- (_Bool)isIPv4;
- (id)localAddress;
- (id)connectedAddress;
- (unsigned short)localPortFromSocket6:(int)arg1;
- (unsigned short)localPortFromSocket4:(int)arg1;
- (id)localHostFromSocket6:(int)arg1;
- (id)localHostFromSocket4:(int)arg1;
- (unsigned short)connectedPortFromSocket6:(int)arg1;
- (unsigned short)connectedPortFromSocket4:(int)arg1;
- (id)connectedHostFromSocket6:(int)arg1;
- (id)connectedHostFromSocket4:(int)arg1;
- (unsigned short)localPort6;
- (unsigned short)localPort4;
- (id)localHost6;
- (id)localHost4;
- (unsigned short)connectedPort6;
- (unsigned short)connectedPort4;
- (id)connectedHost6;
- (id)connectedHost4;
- (unsigned short)localPort;
- (id)localHost;
- (unsigned short)connectedPort;
- (id)connectedHost;
- (_Bool)isConnected;
- (_Bool)isDisconnected;
- (id)otherError:(id)arg1;
- (id)connectionClosedError;
- (id)writeTimeoutError;
- (id)readTimeoutError;
- (id)readMaxedOutError;
- (id)connectTimeoutError;
- (id)sslError:(int)arg1;
- (id)errnoError;
- (id)errnoErrorWithReason:(id)arg1;
- (id)gaiError:(int)arg1;
- (id)badParamError:(id)arg1;
- (id)badConfigError:(id)arg1;
- (void)maybeClose;
- (void)disconnectAfterReadingAndWriting;
- (void)disconnectAfterWriting;
- (void)disconnectAfterReading;
- (void)disconnect;
- (void)closeWithError:(id)arg1;
- (void)doConnectTimeout;
- (void)endConnectTimeout;
- (void)startConnectTimeout:(double)arg1;
- (void)didNotConnect:(int)arg1 error:(id)arg2;
- (void)didConnect:(int)arg1;
- (_Bool)connectWithAddress4:(id)arg1 address6:(id)arg2 error:(id *)arg3;
- (void)lookup:(int)arg1 didFail:(id)arg2;
- (void)lookup:(int)arg1 didSucceedWithAddress4:(id)arg2 address6:(id)arg3;
- (void)lookup:(int)arg1 host:(id)arg2 port:(unsigned short)arg3;
- (_Bool)connectToAddress:(id)arg1 viaInterface:(id)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (_Bool)connectToAddress:(id)arg1 withTimeout:(double)arg2 error:(id *)arg3;
- (_Bool)connectToAddress:(id)arg1 error:(id *)arg2;
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id *)arg5;
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id *)arg3;
- (_Bool)preConnectWithInterface:(id)arg1 error:(id *)arg2;
- (_Bool)doAccept:(int)arg1;
- (_Bool)acceptOnInterface:(id)arg1 port:(unsigned short)arg2 error:(id *)arg3;
- (_Bool)acceptOnPort:(unsigned short)arg1 error:(id *)arg2;
- (void)setUserData:(id)arg1;
- (id)userData;
- (void)setPreferIPv4OverIPv6:(_Bool)arg1;
- (_Bool)isIPv4PreferredOverIPv6;
- (void)setIPv6Enabled:(_Bool)arg1;
- (_Bool)isIPv6Enabled;
- (void)setIPv4Enabled:(_Bool)arg1;
- (_Bool)isIPv4Enabled;
- (void)setAutoDisconnectOnClosedReadStream:(_Bool)arg1;
- (_Bool)autoDisconnectOnClosedReadStream;
- (void)synchronouslySetDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2;
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2 synchronously:(_Bool)arg3;
- (void)getDelegate:(id *)arg1 delegateQueue:(id *)arg2;
- (void)synchronouslySetDelegateQueue:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setDelegateQueue:(id)arg1 synchronously:(_Bool)arg2;
- (id)delegateQueue;
- (void)synchronouslySetDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 synchronously:(_Bool)arg2;
- (id)delegate;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2 socketQueue:(id)arg3;
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;
- (id)initWithSocketQueue:(id)arg1;
- (id)init;

@end

@interface MTAesCtr : NSObject
{
    struct _CCCryptor *_cryptor;
    unsigned char _ivec[16];
    unsigned int _num;
    unsigned char _ecount[16];
}

- (void)encryptIn:(const char *)arg1 out:(char *)arg2 len:(unsigned long long)arg3;
- (void)getIv:(void *)arg1;
- (void *)ecount;
- (unsigned int)num;
- (void)dealloc;
- (id)initWithKey:(const void *)arg1 keyLength:(int)arg2 iv:(const void *)arg3 ecount:(void *)arg4 num:(unsigned int)arg5;
- (id)initWithKey:(const void *)arg1 keyLength:(int)arg2 iv:(const void *)arg3 decrypt:(_Bool)arg4;

@end

@interface MTProxySecret : NSObject <NSCoding>
{
    NSData *_secret;
}

+ (id)parseData:(id)arg1;
+ (id)parse:(id)arg1;
@property(readonly, nonatomic) NSData *secret; // @synthesize secret=_secret;
- (void).cxx_destruct;
- (id)description;
- (id)serializeToString;
- (id)serialize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSecret:(id)arg1;

@end

@interface MTProxySecretType0 : MTProxySecret
{
}

- (_Bool)isEqual:(id)arg1;
- (id)serializeToString;
- (id)serialize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSecret:(id)arg1;

@end

@interface MTProxySecretType1 : MTProxySecret
{
}

- (_Bool)isEqual:(id)arg1;
- (id)serializeToString;
- (id)serialize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSecret:(id)arg1;

@end

@interface MTProxySecretType2 : MTProxySecret
{
    NSString *_domain;
}

@property(readonly, nonatomic) NSString *domain; // @synthesize domain=_domain;
- (void).cxx_destruct;
- (_Bool)isEqual:(id)arg1;
- (id)serializeToString;
- (id)serialize;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSecret:(id)arg1 domain:(id)arg2;

@end

@interface MTSocksProxySettings : NSObject
{
    unsigned short _port;
    NSString *_ip;
    NSString *_username;
    NSString *_password;
    NSData *_secret;
}

@property(readonly, nonatomic) NSData *secret; // @synthesize secret=_secret;
@property(readonly, nonatomic) NSString *password; // @synthesize password=_password;
@property(readonly, nonatomic) NSString *username; // @synthesize username=_username;
@property(readonly, nonatomic) unsigned short port; // @synthesize port=_port;
@property(readonly, nonatomic) NSString *ip; // @synthesize ip=_ip;
- (void).cxx_destruct;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (id)initWithIp:(id)arg1 port:(unsigned short)arg2 username:(id)arg3 password:(id)arg4 secret:(id)arg5;

@end

@interface MTNetworkSettings : NSObject
{
    _Bool _reducedBackupDiscoveryTimeout;
}

@property(readonly, nonatomic) _Bool reducedBackupDiscoveryTimeout; // @synthesize reducedBackupDiscoveryTimeout=_reducedBackupDiscoveryTimeout;
- (_Bool)isEqual:(id)arg1;
- (id)initWithReducedBackupDiscoveryTimeout:(_Bool)arg1;

@end

@interface MTApiEnvironment : NSObject
{
    _Bool _disableUpdates;
    int _apiId;
    NSString *_deviceModel;
    NSString *_systemVersion;
    NSString *_appVersion;
    NSString *_systemLangCode;
    NSNumber *_layer;
    NSData *_systemCode;
    NSString *_langPack;
    NSString *_langPackCode;
    NSString *_apiInitializationHash;
    NSData *_tcpPayloadPrefix;
    NSDictionary *_datacenterAddressOverrides;
    NSString *_accessHostOverride;
    MTSocksProxySettings *_socksProxySettings;
    MTNetworkSettings *_networkSettings;
    CDUnknownBlockType _passwordInputHandler;
}

@property(copy, nonatomic) CDUnknownBlockType passwordInputHandler; // @synthesize passwordInputHandler=_passwordInputHandler;
@property(readonly, nonatomic) MTNetworkSettings *networkSettings; // @synthesize networkSettings=_networkSettings;
@property(readonly, nonatomic) MTSocksProxySettings *socksProxySettings; // @synthesize socksProxySettings=_socksProxySettings;
@property(retain, nonatomic) NSString *accessHostOverride; // @synthesize accessHostOverride=_accessHostOverride;
@property(retain, nonatomic) NSDictionary *datacenterAddressOverrides; // @synthesize datacenterAddressOverrides=_datacenterAddressOverrides;
@property(retain, nonatomic) NSData *tcpPayloadPrefix; // @synthesize tcpPayloadPrefix=_tcpPayloadPrefix;
@property(nonatomic) _Bool disableUpdates; // @synthesize disableUpdates=_disableUpdates;
@property(readonly, nonatomic) NSString *apiInitializationHash; // @synthesize apiInitializationHash=_apiInitializationHash;
@property(readonly, nonatomic) NSString *langPackCode; // @synthesize langPackCode=_langPackCode;
@property(retain, nonatomic) NSString *langPack; // @synthesize langPack=_langPack;
@property(readonly, nonatomic) NSData *systemCode; // @synthesize systemCode=_systemCode;
@property(retain, nonatomic) NSNumber *layer; // @synthesize layer=_layer;
@property(readonly, nonatomic) NSString *systemLangCode; // @synthesize systemLangCode=_systemLangCode;
@property(retain, nonatomic) NSString *appVersion; // @synthesize appVersion=_appVersion;
@property(readonly, nonatomic) NSString *systemVersion; // @synthesize systemVersion=_systemVersion;
@property(readonly, nonatomic) NSString *deviceModel; // @synthesize deviceModel=_deviceModel;
@property(nonatomic) int apiId; // @synthesize apiId=_apiId;
- (void).cxx_destruct;
- (id)withUpdatedSystemCode:(id)arg1;
- (id)withUpdatedNetworkSettings:(id)arg1;
- (id)withUpdatedSocksProxySettings:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)withUpdatedLangPackCode:(id)arg1;
- (id)platform;
- (id)getSysInfoByName:(char *)arg1;
- (unsigned long long)platformType;
- (id)macHWName;
- (id)platformString;
- (void)setLangPackCode:(id)arg1;
- (void)_updateApiInitializationHash;
- (id)init;

@end

@interface MTAtomic : NSObject
{
    int _lock;
    id _value;
}

- (void).cxx_destruct;
- (id)with:(CDUnknownBlockType)arg1;
- (id)modify:(CDUnknownBlockType)arg1;
- (id)value;
- (id)swap:(id)arg1;
- (id)initWithValue:(id)arg1;

@end

@interface MTBackupAddressSignals : NSObject
{
}

+ (id)fetchBackupIps:(_Bool)arg1 currentContext:(id)arg2 additionalSource:(id)arg3 phoneNumber:(id)arg4;
+ (id)fetchConfigFromAddress:(id)arg1 currentContext:(id)arg2;
+ (id)fetchBackupIpsResolveCloudflare:(_Bool)arg1 phoneNumber:(id)arg2 currentContext:(id)arg3 addressOverride:(id)arg4;
+ (id)fetchBackupIpsResolveGoogle:(_Bool)arg1 phoneNumber:(id)arg2 currentContext:(id)arg3 addressOverride:(id)arg4;
+ (_Bool)checkIpData:(id)arg1 timestamp:(int)arg2 source:(id)arg3;

@end

@interface MTBadMsgNotificationMessage : NSObject
{
    int _badMessageSeqNo;
    int _errorCode;
    long long _badMessageId;
}

@property(readonly, nonatomic) int errorCode; // @synthesize errorCode=_errorCode;
@property(readonly, nonatomic) int badMessageSeqNo; // @synthesize badMessageSeqNo=_badMessageSeqNo;
@property(readonly, nonatomic) long long badMessageId; // @synthesize badMessageId=_badMessageId;
- (id)initWithBadMessageId:(long long)arg1 badMessageSeqNo:(int)arg2 errorCode:(int)arg3;

@end

@interface MTBadServerSaltNotificationMessage : MTBadMsgNotificationMessage
{
    long long _nextServerSalt;
}

@property(readonly, nonatomic) long long nextServerSalt; // @synthesize nextServerSalt=_nextServerSalt;
- (id)initWithBadMessageId:(long long)arg1 badMessageSeqNo:(int)arg2 errorCode:(int)arg3 nextServerSalt:(long long)arg4;

@end

@interface MTBag : NSObject
{
    long long _nextKey;
    NSMutableArray *_items;
    NSMutableArray *_itemKeys;
}

- (void).cxx_destruct;
- (id)copyItems;
- (_Bool)isEmpty;
- (void)removeItem:(long long)arg1;
- (void)enumerateItems:(CDUnknownBlockType)arg1;
- (long long)addItem:(id)arg1;
- (id)init;

@end

@interface MTBindingTempAuthKeyContext : NSObject
{
    int _messageSeqNo;
    long long _messageId;
    id _transactionId;
}

@property(readonly, nonatomic) id transactionId; // @synthesize transactionId=_transactionId;
@property(readonly, nonatomic) int messageSeqNo; // @synthesize messageSeqNo=_messageSeqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (id)initWithMessageId:(long long)arg1 messageSeqNo:(int)arg2 transactionId:(id)arg3;

@end

@interface MTBuffer : NSObject
{
    NSMutableData *_data;
}

- (void).cxx_destruct;
- (id)data;
- (void)appendBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)appendInt64:(long long)arg1;
- (void)appendInt32:(int)arg1;
- (id)init;
- (void)appendTLString:(id)arg1;
- (void)appendTLBytes:(id)arg1;

@end

@interface MTBufferReader : NSObject
{
    NSData *_data;
    unsigned long long _offset;
}

- (void).cxx_destruct;
- (id)readRest;
- (_Bool)readInt64:(long long *)arg1;
- (_Bool)readInt32:(int *)arg1;
- (_Bool)readBytes:(void *)arg1 length:(unsigned long long)arg2;
- (id)initWithData:(id)arg1;
- (_Bool)readTLBytes:(id *)arg1;
- (_Bool)readTLString:(id *)arg1;

@end

@interface MTPingHelper : NSObject <PingFoundationDelegate>
{
    CDUnknownBlockType _success;
    PingFoundation *_ping;
}

+ (void)dispatchOnRunLoopThread:(CDUnknownBlockType)arg1;
+ (void)dispatchOnRunLoopThreadImpl:(CDUnknownBlockType)arg1;
+ (id)runLoopThread;
+ (void)runLoopThreadFunc;
- (void).cxx_destruct;
- (void)pingFoundation:(id)arg1 didStartWithAddress:(id)arg2;
- (void)pingFoundation:(id)arg1 didReceivePingResponsePacket:(id)arg2 sequenceNumber:(unsigned short)arg3;
- (void)stop;
- (void)dealloc;
- (id)initWithSuccess:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTConnectionProbing : NSObject
{
}

+ (id)probeProxyWithContext:(id)arg1 datacenterId:(long long)arg2 settings:(id)arg3;
+ (id)pingAddress;

@end

@interface MTContextBlockChangeListener : NSObject <MTContextChangeListener>
{
    CDUnknownBlockType _contextIsPasswordRequiredUpdated;
    CDUnknownBlockType _fetchContextDatacenterPublicKeys;
    CDUnknownBlockType _isContextNetworkAccessAllowed;
}

@property(copy, nonatomic) CDUnknownBlockType isContextNetworkAccessAllowed; // @synthesize isContextNetworkAccessAllowed=_isContextNetworkAccessAllowed;
@property(copy, nonatomic) CDUnknownBlockType fetchContextDatacenterPublicKeys; // @synthesize fetchContextDatacenterPublicKeys=_fetchContextDatacenterPublicKeys;
@property(copy, nonatomic) CDUnknownBlockType contextIsPasswordRequiredUpdated; // @synthesize contextIsPasswordRequiredUpdated=_contextIsPasswordRequiredUpdated;
- (void).cxx_destruct;
- (id)isContextNetworkAccessAllowed:(id)arg1;
- (id)fetchContextDatacenterPublicKeys:(id)arg1 datacenterId:(long long)arg2;
- (void)contextIsPasswordRequiredUpdated:(id)arg1 datacenterId:(long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTTransportSchemeKey : NSObject <NSCoding, NSCopying>
{
    _Bool _isProxy;
    _Bool _isMedia;
    long long _datacenterId;
}

@property(readonly, nonatomic) _Bool isMedia; // @synthesize isMedia=_isMedia;
@property(readonly, nonatomic) _Bool isProxy; // @synthesize isProxy=_isProxy;
@property(readonly, nonatomic) long long datacenterId; // @synthesize datacenterId=_datacenterId;
- (_Bool)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDatacenterId:(long long)arg1 isProxy:(_Bool)arg2 isMedia:(_Bool)arg3;

@end

@interface MTContext : NSObject <MTDiscoverDatacenterAddressActionDelegate, MTDatacenterAuthActionDelegate, MTDatacenterTransferAuthActionDelegate>
{
    long long _uniqueId;
    double _globalTimeDifference;
    NSMutableDictionary *_datacenterSeedAddressSetById;
    NSMutableDictionary *_datacenterAddressSetById;
    NSMutableDictionary *_datacenterManuallySelectedSchemeById;
    NSMutableDictionary *_transportSchemeStats;
    MTTimer *_schemeStatsSyncTimer;
    NSMutableDictionary *_datacenterAuthInfoById;
    NSMutableDictionary *_datacenterPublicKeysById;
    NSMutableDictionary *_authTokenById;
    NSMutableArray *_changeListeners;
    MTSignal *_discoverBackupAddressListSignal;
    NSMutableDictionary *_discoverDatacenterAddressActions;
    NSMutableDictionary *_datacenterAuthActions;
    NSMutableDictionary *_datacenterTempAuthActions;
    NSMutableDictionary *_datacenterTransferAuthActions;
    NSMutableDictionary *_datacenterCheckKeyRemovedActionTimestamps;
    NSMutableDictionary *_datacenterCheckKeyRemovedActions;
    NSMutableDictionary *_cleanupSessionIdsByAuthKeyId;
    NSMutableArray *_currentSessionInfos;
    NSMutableDictionary *_periodicTasksTimerByDatacenterId;
    int _passwordEntryRequiredLock;
    NSMutableDictionary *_passwordRequiredByDatacenterId;
    NSMutableDictionary *_transportSchemeDisposableByDatacenterId;
    id <MTDisposable> _backupAddressListDisposable;
    NSMutableDictionary *_fetchPublicKeysActions;
    MTDisposableSet *_cleanupSessionInfoDisposables;
    _Bool _isTestingEnvironment;
    _Bool _useTempAuthKeys;
    id <MTKeychain> _keychain;
    id <MTSerialization> _serialization;
    id <EncryptionProvider> _encryptionProvider;
    MTApiEnvironment *_apiEnvironment;
}

+ (id)contextQueue;
+ (void)setFixedTimeDifference:(int)arg1;
+ (int)fixedTimeDifference;
@property(readonly, nonatomic) _Bool useTempAuthKeys; // @synthesize useTempAuthKeys=_useTempAuthKeys;
@property(readonly, nonatomic) _Bool isTestingEnvironment; // @synthesize isTestingEnvironment=_isTestingEnvironment;
@property(readonly, nonatomic) MTApiEnvironment *apiEnvironment; // @synthesize apiEnvironment=_apiEnvironment;
@property(retain, nonatomic) id <EncryptionProvider> encryptionProvider; // @synthesize encryptionProvider=_encryptionProvider;
@property(readonly, nonatomic) id <MTSerialization> serialization; // @synthesize serialization=_serialization;
@property(retain, nonatomic) id <MTKeychain> keychain; // @synthesize keychain=_keychain;
- (void).cxx_destruct;
- (void)checkIfLoggedOut:(long long)arg1;
- (void)updatePeriodicTasks;
- (void)updateApiEnvironment:(CDUnknownBlockType)arg1;
- (void)reportProblemsWithDatacenterAddressForId:(long long)arg1 address:(id)arg2;
- (void)datacenterTransferAuthActionCompleted:(id)arg1;
- (void)authTokenForDatacenterWithIdRequired:(long long)arg1 authToken:(id)arg2 masterDatacenterId:(long long)arg3;
- (void)datacenterAuthActionCompleted:(id)arg1;
- (void)tempAuthKeyForDatacenterWithIdRequired:(long long)arg1 keyType:(unsigned long long)arg2;
- (void)authInfoForDatacenterWithIdRequired:(long long)arg1 isCdn:(_Bool)arg2;
- (void)discoverDatacenterAddressActionCompleted:(id)arg1;
- (void)addressSetForDatacenterWithIdRequired:(long long)arg1;
- (void)updateAuthTokenForDatacenterWithId:(long long)arg1 authToken:(id)arg2;
- (void)revalidateTransportSchemeForDatacenterId:(long long)arg1 transportScheme:(id)arg2 media:(_Bool)arg3;
- (void)beginExplicitBackupAddressDiscovery;
- (void)_beginBackupAddressDiscoveryWithDelay:(double)arg1;
- (void)invalidateTransportSchemeForDatacenterId:(long long)arg1 transportScheme:(id)arg2 isProbablyHttp:(_Bool)arg3 media:(_Bool)arg4;
- (void)invalidateTransportSchemesForKnownDatacenterIds;
- (void)invalidateTransportSchemesForDatacenterIds:(id)arg1;
- (void)reportTransportSchemeSuccessForDatacenterId:(long long)arg1 transportScheme:(id)arg2;
- (void)reportTransportSchemeFailureForDatacenterId:(long long)arg1 transportScheme:(id)arg2;
- (void)_syncTransportSchemeStats;
- (void)_scheduleSyncTransportSchemeStats;
- (void)_withTransportSchemeStatsForDatacenterId:(long long)arg1 transportScheme:(id)arg2 process:(CDUnknownBlockType)arg3;
- (void)transportSchemeForDatacenterWithIdRequired:(long long)arg1 moreOptimalThan:(id)arg2 beginWithHttp:(_Bool)arg3 media:(_Bool)arg4 isProxy:(_Bool)arg5;
- (void)transportSchemeForDatacenterWithIdRequired:(long long)arg1 media:(_Bool)arg2;
- (id)_allTransportSchemesForDatacenterWithId:(long long)arg1;
- (id)authTokenForDatacenterWithId:(long long)arg1;
- (void)removeTokenForDatacenterWithId:(long long)arg1;
- (void)removeAllAuthTokens;
- (void)publicKeysForDatacenterWithIdRequired:(long long)arg1;
- (void)updatePublicKeysForDatacenterWithId:(long long)arg1 publicKeys:(id)arg2;
- (id)publicKeysForDatacenterWithId:(long long)arg1;
- (id)authInfoForDatacenterWithId:(long long)arg1;
- (id)transportSchemesForDatacenterWithId:(long long)arg1 media:(_Bool)arg2 enforceMedia:(_Bool)arg3 isProxy:(_Bool)arg4;
- (id)chooseTransportSchemeForConnectionToDatacenterId:(long long)arg1 schemes:(id)arg2;
- (id)addressSetForDatacenterWithId:(long long)arg1;
- (void)enumerateAddressSetsForDatacenters:(CDUnknownBlockType)arg1;
- (id)knownDatacenterIds;
- (void)sessionIdsDeletedForAuthKeyId:(long long)arg1 sessionIds:(id)arg2;
- (void)collectSessionIdsForCleanupWithAuthKeyId:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)scheduleSessionCleanupForAuthKeyId:(long long)arg1 sessionInfo:(id)arg2;
- (void)updateTransportSchemeForDatacenterWithId:(long long)arg1 transportScheme:(id)arg2 media:(_Bool)arg3 isProxy:(_Bool)arg4;
- (_Bool)updatePasswordInputRequiredForDatacenterWithId:(long long)arg1 required:(_Bool)arg2;
- (_Bool)isPasswordInputRequiredForDatacenterWithId:(long long)arg1;
- (void)updateAuthInfoForDatacenterWithId:(long long)arg1 authInfo:(id)arg2;
- (void)addAddressForDatacenterWithId:(long long)arg1 address:(id)arg2;
- (void)updateAddressSetForDatacenterWithId:(long long)arg1 addressSet:(id)arg2 forceUpdateSchemes:(_Bool)arg3;
- (void)setSeedAddressSetForDatacenterWithId:(long long)arg1 seedAddressSet:(id)arg2;
- (void)setGlobalTimeDifference:(double)arg1;
- (double)globalTimeOffsetFromUTC;
- (double)globalTimeDifference;
- (double)globalTime;
- (void)setDiscoverBackupAddressListSignal:(id)arg1;
- (void)removeChangeListener:(id)arg1;
- (void)addChangeListener:(id)arg1;
- (void)performBatchUpdates:(CDUnknownBlockType)arg1;
- (void)cleanup;
- (void)dealloc;
- (id)initWithSerialization:(id)arg1 encryptionProvider:(id)arg2 apiEnvironment:(id)arg3 isTestingEnvironment:(_Bool)arg4 useTempAuthKeys:(_Bool)arg5;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTDNSHostContext : NSObject
{
    MTBag *_subscribers;
    id <MTDisposable> _disposable;
}

- (void).cxx_destruct;
- (void)complete:(id)arg1;
- (_Bool)isEmpty;
- (void)removeSubscriber:(long long)arg1;
- (long long)addSubscriber:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithHost:(id)arg1 disposable:(id)arg2;

@end

@interface MTDNSContext : NSObject
{
    NSMutableDictionary *_contexts;
}

+ (id)shared;
+ (id)sharedQueue;
- (void).cxx_destruct;
- (id)performLookup:(id)arg1 port:(int)arg2;
- (id)subscribe:(id)arg1 port:(int)arg2 completion:(CDUnknownBlockType)arg3;
- (id)init;

@end

@interface MTDNSCachedHostname : NSObject
{
    NSString *_ip;
    double _timestamp;
}

@property(nonatomic) double timestamp; // @synthesize timestamp=_timestamp;
@property(retain, nonatomic) NSString *ip; // @synthesize ip=_ip;
- (void).cxx_destruct;
- (id)initWithIp:(id)arg1 timestamp:(double)arg2;

@end

@interface MTDNS : NSObject
{
}

+ (id)resolveHostnameUniversal:(id)arg1 port:(int)arg2;
+ (id)resolveHostnameNative:(id)arg1 port:(int)arg2;
+ (id)resolveHostname:(id)arg1;
+ (void)cacheIp:(id)arg1 ip:(id)arg2;
+ (id)cachedIp:(id)arg1;
+ (id)hostnameCache;

@end

@interface MTDatacenterAddress : NSObject <NSCoding, NSCopying>
{
    _Bool _preferForMedia;
    _Bool _restrictToTcp;
    _Bool _cdn;
    _Bool _preferForProxy;
    unsigned short _port;
    NSString *_host;
    NSString *_ip;
    NSData *_secret;
}

@property(readonly, nonatomic) NSData *secret; // @synthesize secret=_secret;
@property(readonly, nonatomic) _Bool preferForProxy; // @synthesize preferForProxy=_preferForProxy;
@property(readonly, nonatomic) _Bool cdn; // @synthesize cdn=_cdn;
@property(readonly, nonatomic) _Bool restrictToTcp; // @synthesize restrictToTcp=_restrictToTcp;
@property(readonly, nonatomic) _Bool preferForMedia; // @synthesize preferForMedia=_preferForMedia;
@property(readonly, nonatomic) unsigned short port; // @synthesize port=_port;
@property(readonly, nonatomic) NSString *ip; // @synthesize ip=_ip;
@property(readonly, nonatomic) NSString *host; // @synthesize host=_host;
- (void).cxx_destruct;
- (id)description;
- (_Bool)isIpv6;
- (_Bool)isEqualToAddress:(id)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithIp:(id)arg1 port:(unsigned short)arg2 preferForMedia:(_Bool)arg3 restrictToTcp:(_Bool)arg4 cdn:(_Bool)arg5 preferForProxy:(_Bool)arg6 secret:(id)arg7;

@end

@interface MTDatacenterAddressListData : NSObject
{
    NSDictionary *_addressList;
}

@property(readonly, nonatomic) NSDictionary *addressList; // @synthesize addressList=_addressList;
- (void).cxx_destruct;
- (id)description;
- (id)initWithAddressList:(id)arg1;

@end

@interface MTDatacenterAddressSet : NSObject <NSCoding>
{
    NSArray *_addressList;
}

@property(readonly, nonatomic) NSArray *addressList; // @synthesize addressList=_addressList;
- (void).cxx_destruct;
- (id)firstAddress;
- (id)description;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithAddressList:(id)arg1;

@end

@interface MTDatacenterAuthAction : NSObject <MTDatacenterAuthMessageServiceDelegate>
{
    _Bool _isCdn;
    unsigned long long _tempAuthKeyType;
    MTDatacenterAuthKey *_bindKey;
    long long _datacenterId;
    MTContext *_context;
    _Bool _awaitingAddresSetUpdate;
    MTProto *_authMtProto;
    MTProto *_bindMtProto;
    MTMetaDisposable *_verifyDisposable;
    _Bool _tempAuth;
    id <MTDatacenterAuthActionDelegate> _delegate;
    CDUnknownBlockType _completedWithResult;
}

@property(copy, nonatomic) CDUnknownBlockType completedWithResult; // @synthesize completedWithResult=_completedWithResult;
@property(nonatomic) __weak id <MTDatacenterAuthActionDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) _Bool tempAuth; // @synthesize tempAuth=_tempAuth;
- (void).cxx_destruct;
- (void)fail;
- (void)complete;
- (void)cancel;
- (void)cleanup;
- (void)completeWithAuthKey:(id)arg1 timestamp:(long long)arg2;
- (void)authMessageServiceCompletedWithAuthKey:(id)arg1 timestamp:(long long)arg2;
- (void)execute:(id)arg1 datacenterId:(long long)arg2 isCdn:(_Bool)arg3;
- (void)dealloc;
- (id)initWithTempAuth:(_Bool)arg1 tempAuthKeyType:(unsigned long long)arg2 bindKey:(id)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTDatacenterAuthKey : NSObject <NSCoding>
{
    _Bool _notBound;
    NSData *_authKey;
    long long _authKeyId;
}

@property(readonly, nonatomic) _Bool notBound; // @synthesize notBound=_notBound;
@property(readonly, nonatomic) long long authKeyId; // @synthesize authKeyId=_authKeyId;
@property(readonly, nonatomic) NSData *authKey; // @synthesize authKey=_authKey;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithAuthKey:(id)arg1 authKeyId:(long long)arg2 notBound:(_Bool)arg3;

@end

@interface MTDatacenterAuthInfo : NSObject <NSCoding>
{
    NSData *_authKey;
    long long _authKeyId;
    NSArray *_saltSet;
    NSDictionary *_authKeyAttributes;
    MTDatacenterAuthKey *_mainTempAuthKey;
    MTDatacenterAuthKey *_mediaTempAuthKey;
}

@property(readonly, nonatomic) MTDatacenterAuthKey *mediaTempAuthKey; // @synthesize mediaTempAuthKey=_mediaTempAuthKey;
@property(readonly, nonatomic) MTDatacenterAuthKey *mainTempAuthKey; // @synthesize mainTempAuthKey=_mainTempAuthKey;
@property(readonly, nonatomic) NSDictionary *authKeyAttributes; // @synthesize authKeyAttributes=_authKeyAttributes;
@property(readonly, nonatomic) NSArray *saltSet; // @synthesize saltSet=_saltSet;
@property(readonly, nonatomic) long long authKeyId; // @synthesize authKeyId=_authKeyId;
@property(readonly, nonatomic) NSData *authKey; // @synthesize authKey=_authKey;
- (void).cxx_destruct;
- (id)description;
@property(readonly, nonatomic) MTDatacenterAuthKey *persistentAuthKey;
- (id)withUpdatedTempAuthKeyWithType:(unsigned long long)arg1 key:(id)arg2;
- (id)tempAuthKeyWithType:(unsigned long long)arg1;
- (id)withUpdatedAuthKeyAttributes:(id)arg1;
- (id)mergeSaltSet:(id)arg1 forTimestamp:(double)arg2;
- (long long)authSaltForMessageId:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithAuthKey:(id)arg1 authKeyId:(long long)arg2 saltSet:(id)arg3 authKeyAttributes:(id)arg4 mainTempAuthKey:(id)arg5 mediaTempAuthKey:(id)arg6;

@end

@interface MTDatacenterAuthMessageService : NSObject <MTMessageService>
{
    id <EncryptionProvider> _encryptionProvider;
    _Bool _tempAuth;
    MTSessionInfo *_sessionInfo;
    int _stage;
    long long _currentStageMessageId;
    int _currentStageMessageSeqNo;
    id _currentStageTransactionId;
    NSData *_nonce;
    NSData *_serverNonce;
    NSData *_newNonce;
    NSData *_dhP;
    NSData *_dhQ;
    long long _dhPublicKeyFingerprint;
    NSData *_dhEncryptedData;
    MTDatacenterAuthKey *_authKey;
    NSData *_encryptedClientData;
    NSArray *_publicKeys;
    id <MTDatacenterAuthMessageServiceDelegate> _delegate;
}

@property(nonatomic) __weak id <MTDatacenterAuthMessageServiceDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)mtProtoAllTransactionsMayHaveFailed:(id)arg1;
- (void)mtProto:(id)arg1 transactionsMayHaveFailed:(id)arg2;
- (void)mtProto:(id)arg1 protocolErrorReceived:(int)arg2;
- (void)mtProto:(id)arg1 receivedMessage:(id)arg2;
- (id)mtProtoMessageTransaction:(id)arg1;
- (void)mtProtoPublicKeysUpdated:(id)arg1 datacenterId:(long long)arg2 publicKeys:(id)arg3;
- (void)mtProtoDidAddService:(id)arg1;
- (void)reset:(id)arg1;
- (id)initWithContext:(id)arg1 tempAuth:(_Bool)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTDatacenterSaltInfo : NSObject <NSCoding>
{
    long long _salt;
    long long _firstValidMessageId;
    long long _lastValidMessageId;
}

@property(readonly, nonatomic) long long lastValidMessageId; // @synthesize lastValidMessageId=_lastValidMessageId;
@property(readonly, nonatomic) long long firstValidMessageId; // @synthesize firstValidMessageId=_firstValidMessageId;
@property(readonly, nonatomic) long long salt; // @synthesize salt=_salt;
- (_Bool)isValidFutureSaltForMessageId:(long long)arg1;
- (long long)validMessageCountAfterId:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSalt:(long long)arg1 firstValidMessageId:(long long)arg2 lastValidMessageId:(long long)arg3;

@end

@interface MTDatacenterTransferAuthAction : NSObject <MTContextChangeListener>
{
    id _authToken;
    MTProto *_sourceDatacenterMtProto;
    long long _destinationDatacenterId;
    MTProto *_destinationDatacenterMtProto;
    MTContext *_context;
    id <MTDatacenterTransferAuthActionDelegate> _delegate;
}

@property(nonatomic) __weak id <MTDatacenterTransferAuthActionDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)fail;
- (void)complete;
- (void)cancel;
- (void)beginTransferWithId:(int)arg1 data:(id)arg2;
- (void)beginTransferFromDatacenterId:(long long)arg1;
- (void)contextDatacenterAuthTokenUpdated:(id)arg1 datacenterId:(long long)arg2 authToken:(id)arg3;
- (void)execute:(id)arg1 masterDatacenterId:(long long)arg2 destinationDatacenterId:(long long)arg3 authToken:(id)arg4;
- (void)cleanup;
- (void)dealloc;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTDatacenterVerificationData : NSObject
{
    _Bool _isTestingEnvironment;
    long long _datacenterId;
}

@property(readonly, nonatomic) _Bool isTestingEnvironment; // @synthesize isTestingEnvironment=_isTestingEnvironment;
@property(readonly, nonatomic) long long datacenterId; // @synthesize datacenterId=_datacenterId;
- (id)description;
- (id)initWithDatacenterId:(long long)arg1 isTestingEnvironment:(_Bool)arg2;

@end

@interface MTDestroySessionResponseMessage : NSObject
{
}

@end

@interface MTDestroySessionResponseOkMessage : MTDestroySessionResponseMessage
{
    long long _sessionId;
}

@property(readonly, nonatomic) long long sessionId; // @synthesize sessionId=_sessionId;
- (id)initWithSessionId:(long long)arg1;

@end

@interface MTDestroySessionResponseNoneMessage : MTDestroySessionResponseMessage
{
    long long _sessionId;
}

@property(readonly, nonatomic) long long sessionId; // @synthesize sessionId=_sessionId;
- (id)initWithSessionId:(long long)arg1;

@end

@interface MTDestroySessionMultipleResponseMessage : MTDestroySessionResponseMessage
{
    NSData *_responsesData;
}

@property(readonly, nonatomic) NSData *responsesData; // @synthesize responsesData=_responsesData;
- (void).cxx_destruct;
- (id)initWithResponses:(id)arg1;

@end

@interface MTDiscoverConnectionSignals : NSObject
{
}

+ (id)checkIfAuthKeyRemovedWithContext:(id)arg1 datacenterId:(long long)arg2 authKey:(id)arg3;
+ (id)discoverSchemeWithContext:(id)arg1 datacenterId:(long long)arg2 addressList:(id)arg3 media:(_Bool)arg4 isProxy:(_Bool)arg5;
+ (id)tcpConnectionWithContext:(id)arg1 datacenterId:(unsigned long long)arg2 address:(id)arg3;
+ (_Bool)isIpv6:(id)arg1;
+ (_Bool)isResponseValid:(id)arg1 payloadData:(CDStruct_60067b7e)arg2;
+ (id)payloadData:(CDStruct_60067b7e *)arg1 context:(id)arg2 address:(id)arg3;

@end

@interface MTDiscoverDatacenterAddressAction : NSObject <MTContextChangeListener>
{
    long long _datacenterId;
    MTContext *_context;
    long long _targetDatacenterId;
    _Bool _awaitingAddresSetUpdate;
    MTProto *_mtProto;
    MTRequestMessageService *_requestService;
    NSMutableSet *_processedDatacenters;
    id <MTDiscoverDatacenterAddressActionDelegate> _delegate;
}

@property(nonatomic) __weak id <MTDiscoverDatacenterAddressActionDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)fail;
- (void)complete;
- (void)cancel;
- (void)cleanup;
- (void)getConfigFailed;
- (void)getConfigSuccess:(id)arg1;
- (void)contextDatacenterAuthInfoUpdated:(id)arg1 datacenterId:(long long)arg2 authInfo:(id)arg3;
- (void)askForAnAddressDatacenterWithId:(long long)arg1 useTempAuthKeys:(_Bool)arg2;
- (void)execute:(id)arg1 datacenterId:(long long)arg2;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTBlockDisposable : NSObject <MTDisposable>
{
    void *_block;
}

- (void)dispose;
- (void)dealloc;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTMetaDisposable : NSObject <MTDisposable>
{
    int _lock;
    _Bool _disposed;
    id <MTDisposable> _disposable;
}

- (void).cxx_destruct;
- (void)dispose;
- (void)setDisposable:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTDisposableSet : NSObject <MTDisposable>
{
    int _lock;
    _Bool _disposed;
    id <MTDisposable> _singleDisposable;
    NSArray *_multipleDisposables;
}

- (void).cxx_destruct;
- (void)dispose;
- (void)remove:(id)arg1;
- (void)add:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTDropResponseContext : NSObject
{
    int _messageSeqNo;
    long long _dropMessageId;
    long long _messageId;
}

@property(nonatomic) int messageSeqNo; // @synthesize messageSeqNo=_messageSeqNo;
@property(nonatomic) long long messageId; // @synthesize messageId=_messageId;
@property(readonly, nonatomic) long long dropMessageId; // @synthesize dropMessageId=_dropMessageId;
- (id)initWithDropMessageId:(long long)arg1;

@end

@interface MTDropRpcResultMessage : NSObject
{
}

@end

@interface MTDropRpcResultUnknownMessage : MTDropRpcResultMessage
{
}

@end

@interface MTDropRpcResultDroppedRunningMessage : MTDropRpcResultMessage
{
}

@end

@interface MTDropRpcResultDroppedMessage : MTDropRpcResultMessage
{
    int _seqNo;
    int _size;
    long long _messageId;
}

@property(readonly, nonatomic) int size; // @synthesize size=_size;
@property(readonly, nonatomic) int seqNo; // @synthesize seqNo=_seqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (id)initWithMessageId:(long long)arg1 seqNo:(int)arg2 size:(int)arg3;

@end

@interface MTBackupDatacenterAddress : NSObject
{
    int _datacenterId;
    int _port;
    NSString *_ip;
    NSData *_secret;
}

@property(readonly, nonatomic) NSData *secret; // @synthesize secret=_secret;
@property(readonly, nonatomic) int port; // @synthesize port=_port;
@property(readonly, nonatomic) NSString *ip; // @synthesize ip=_ip;
@property(readonly, nonatomic) int datacenterId; // @synthesize datacenterId=_datacenterId;
- (void).cxx_destruct;
- (id)initWithDatacenterId:(int)arg1 ip:(id)arg2 port:(int)arg3 secret:(id)arg4;

@end

@interface MTBackupDatacenterData : NSObject
{
    int _timestamp;
    int _expirationDate;
    NSArray *_addressList;
}

@property(readonly, nonatomic) NSArray *addressList; // @synthesize addressList=_addressList;
@property(readonly, nonatomic) int expirationDate; // @synthesize expirationDate=_expirationDate;
@property(readonly, nonatomic) int timestamp; // @synthesize timestamp=_timestamp;
- (void).cxx_destruct;
- (id)initWithTimestamp:(int)arg1 expirationDate:(int)arg2 addressList:(id)arg3;

@end

@interface MTExportedAuthorizationData : NSObject
{
    int _authorizationId;
    NSData *_authorizationBytes;
}

@property(readonly, nonatomic) int authorizationId; // @synthesize authorizationId=_authorizationId;
@property(readonly, nonatomic) NSData *authorizationBytes; // @synthesize authorizationBytes=_authorizationBytes;
- (void).cxx_destruct;
- (id)initWithAuthorizationBytes:(id)arg1 authorizationId:(int)arg2;

@end

@interface MTFileBasedKeychain : NSObject <MTKeychain>
{
    NSString *_name;
    _Bool _encrypted;
    NSData *_aesKey;
    NSData *_aesIv;
    NSString *_documentsPath;
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } _TG_SYNCHRONIZED__dictByGroup;
    NSMutableDictionary *_dictByGroup;
}

+ (id)keychainWithName:(id)arg1 documentsPath:(id)arg2;
+ (id)unencryptedKeychainWithName:(id)arg1 documentsPath:(id)arg2;
- (void).cxx_destruct;
- (id)contentsForGroup:(id)arg1;
- (void)dropGroup:(id)arg1;
- (void)removeObjectForKey:(id)arg1 group:(id)arg2;
- (id)objectForKey:(id)arg1 group:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2 group:(id)arg3;
- (void)_storeKeychain:(id)arg1;
- (void)_loadKeychainIfNeeded:(id)arg1;
- (id)filePathForName:(id)arg1 group:(id)arg2;
- (id)initWithName:(id)arg1 documentsPath:(id)arg2 encrypted:(_Bool)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTFutureSalt : NSObject
{
    int _validSince;
    int _validUntil;
    long long _salt;
}

@property(readonly, nonatomic) long long salt; // @synthesize salt=_salt;
@property(readonly, nonatomic) int validUntil; // @synthesize validUntil=_validUntil;
@property(readonly, nonatomic) int validSince; // @synthesize validSince=_validSince;
- (id)initWithValidSince:(int)arg1 validUntil:(int)arg2 salt:(long long)arg3;

@end

@interface MTFutureSaltsMessage : NSObject
{
    int _now;
    long long _requestMessageId;
    NSArray *_salts;
}

@property(readonly, nonatomic) NSArray *salts; // @synthesize salts=_salts;
@property(readonly, nonatomic) int now; // @synthesize now=_now;
@property(readonly, nonatomic) long long requestMessageId; // @synthesize requestMessageId=_requestMessageId;
- (void).cxx_destruct;
- (id)initWithRequestMessageId:(long long)arg1 now:(int)arg2 salts:(id)arg3;

@end

@interface MTGzip : NSObject
{
}

+ (id)decompress:(id)arg1;

@end

@interface MTHttpResponse : NSObject
{
    NSDictionary *_headers;
    NSData *_data;
}

@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) NSDictionary *headers; // @synthesize headers=_headers;
- (void).cxx_destruct;
- (id)initWithHeaders:(id)arg1 data:(id)arg2;

@end

@interface MTHttpRequestOperation : NSObject
{
}

+ (id)dataForHttpUrl:(id)arg1 headers:(id)arg2;
+ (id)dataForHttpUrl:(id)arg1;

@end

@interface MTIncomingMessage : NSObject
{
    int _seqNo;
    long long _messageId;
    long long _authKeyId;
    long long _sessionId;
    long long _salt;
    double _timestamp;
    long long _size;
    id _body;
}

@property(readonly, nonatomic) id body; // @synthesize body=_body;
@property(readonly, nonatomic) long long size; // @synthesize size=_size;
@property(readonly, nonatomic) double timestamp; // @synthesize timestamp=_timestamp;
@property(readonly, nonatomic) long long salt; // @synthesize salt=_salt;
@property(readonly, nonatomic) long long sessionId; // @synthesize sessionId=_sessionId;
@property(readonly, nonatomic) long long authKeyId; // @synthesize authKeyId=_authKeyId;
@property(readonly, nonatomic) int seqNo; // @synthesize seqNo=_seqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (id)initWithMessageId:(long long)arg1 seqNo:(int)arg2 authKeyId:(long long)arg3 sessionId:(long long)arg4 salt:(long long)arg5 timestamp:(double)arg6 size:(long long)arg7 body:(id)arg8;

@end

@interface MTInputStream : NSObject
{
    NSInputStream *_wrappedInputStream;
}

- (void).cxx_destruct;
- (id)readBytes:(_Bool *)arg1;
- (id)readBytes;
- (id)readString:(_Bool *)arg1;
- (id)readString;
- (id)readMutableData:(unsigned long long)arg1 failed:(_Bool *)arg2;
- (id)readMutableData:(unsigned long long)arg1;
- (id)readData:(int)arg1 failed:(_Bool *)arg2;
- (id)readData:(int)arg1;
- (double)readDouble:(_Bool *)arg1;
- (double)readDouble;
- (long long)readInt64:(_Bool *)arg1;
- (long long)readInt64;
- (int)readInt32:(_Bool *)arg1;
- (int)readInt32;
- (id)wrappedInputStream;
- (void)dealloc;
- (id)initWithData:(id)arg1;

@end

@interface MTInternalMessageParser : NSObject
{
}

+ (id)unwrapMessage:(id)arg1;
+ (id)decompressGZip:(id)arg1;
+ (id)readBytes:(id)arg1 skippingLength:(unsigned long long)arg2;
+ (id)parseMessage:(id)arg1;

@end

@interface MTMessage : NSObject
{
    int _seqNo;
    long long _messageId;
    NSData *_data;
}

@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) int seqNo; // @synthesize seqNo=_seqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (id)initWithMessageId:(long long)arg1 seqNo:(int)arg2 data:(id)arg3;

@end

@interface MTMessageEncryptionKey : NSObject
{
    NSData *_key;
    NSData *_iv;
}

+ (id)messageEncryptionKeyV2ForAuthKey:(id)arg1 messageKey:(id)arg2 toClient:(_Bool)arg3;
+ (id)messageEncryptionKeyForAuthKey:(id)arg1 messageKey:(id)arg2 toClient:(_Bool)arg3;
@property(readonly, nonatomic) NSData *iv; // @synthesize iv=_iv;
@property(readonly, nonatomic) NSData *key; // @synthesize key=_key;
- (void).cxx_destruct;
- (id)initWithKey:(id)arg1 iv:(id)arg2;

@end

@interface MTMTMessageTransactionInternalId : NSObject <NSCopying>
{
    unsigned long long _value;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)init;

@end

@interface MTMessageTransaction : NSObject
{
    _Bool _allowServiceMode;
    _Bool _requiresEncryption;
    id _internalId;
    CDUnknownBlockType _completion;
    CDUnknownBlockType _prepared;
    CDUnknownBlockType _failed;
    NSArray *_messagePayload;
}

@property(nonatomic) _Bool requiresEncryption; // @synthesize requiresEncryption=_requiresEncryption;
@property(nonatomic) _Bool allowServiceMode; // @synthesize allowServiceMode=_allowServiceMode;
@property(retain, nonatomic) NSArray *messagePayload; // @synthesize messagePayload=_messagePayload;
@property(copy, nonatomic) CDUnknownBlockType failed; // @synthesize failed=_failed;
@property(copy, nonatomic) CDUnknownBlockType prepared; // @synthesize prepared=_prepared;
@property(copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
@property(readonly, nonatomic) id internalId; // @synthesize internalId=_internalId;
- (void).cxx_destruct;
- (id)initWithMessagePayload:(id)arg1 prepared:(CDUnknownBlockType)arg2 failed:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;

@end

@interface MTMsgAllInfoMessage : NSObject
{
    NSArray *_messageIds;
    NSData *_info;
}

@property(readonly, nonatomic) NSData *info; // @synthesize info=_info;
@property(readonly, nonatomic) NSArray *messageIds; // @synthesize messageIds=_messageIds;
- (void).cxx_destruct;
- (id)initWithMessageIds:(id)arg1 info:(id)arg2;

@end

@interface MTMsgContainerMessage : NSObject
{
    NSArray *_messages;
}

@property(readonly, nonatomic) NSArray *messages; // @synthesize messages=_messages;
- (void).cxx_destruct;
- (id)initWithMessages:(id)arg1;

@end

@interface MTMsgDetailedInfoMessage : NSObject
{
    int _responseLength;
    int _status;
    long long _responseMessageId;
}

@property(readonly, nonatomic) int status; // @synthesize status=_status;
@property(readonly, nonatomic) int responseLength; // @synthesize responseLength=_responseLength;
@property(readonly, nonatomic) long long responseMessageId; // @synthesize responseMessageId=_responseMessageId;
- (id)initWithResponseMessageId:(long long)arg1 responseLength:(int)arg2 status:(int)arg3;

@end

@interface MTMsgDetailedResponseInfoMessage : MTMsgDetailedInfoMessage
{
    long long _requestMessageId;
}

@property(readonly, nonatomic) long long requestMessageId; // @synthesize requestMessageId=_requestMessageId;
- (id)initWithRequestMessageId:(long long)arg1 responseMessageId:(long long)arg2 responseLength:(int)arg3 status:(int)arg4;

@end

@interface MTMsgResendReqMessage : NSObject
{
    NSArray *_messageIds;
}

@property(readonly, nonatomic) NSArray *messageIds; // @synthesize messageIds=_messageIds;
- (void).cxx_destruct;
- (id)initWithMessageIds:(id)arg1;

@end

@interface MTMsgsAckMessage : NSObject
{
    NSArray *_messageIds;
}

@property(readonly, nonatomic) NSArray *messageIds; // @synthesize messageIds=_messageIds;
- (void).cxx_destruct;
- (id)initWithMessageIds:(id)arg1;

@end

@interface MTMsgsStateInfoMessage : NSObject
{
    long long _requestMessageId;
    NSData *_info;
}

@property(readonly, nonatomic) NSData *info; // @synthesize info=_info;
@property(readonly, nonatomic) long long requestMessageId; // @synthesize requestMessageId=_requestMessageId;
- (void).cxx_destruct;
- (id)initWithRequestMessageId:(long long)arg1 info:(id)arg2;

@end

@interface MTMsgsStateReqMessage : NSObject
{
    NSArray *_messageIds;
}

@property(readonly, nonatomic) NSArray *messageIds; // @synthesize messageIds=_messageIds;
- (void).cxx_destruct;
- (id)initWithMessageIds:(id)arg1;

@end

@interface MTNetworkAvailabilityContext : NSObject
{
    MTNetworkAvailability *_context;
}

@property(nonatomic) __weak MTNetworkAvailability *context; // @synthesize context=_context;
- (void).cxx_destruct;

@end

@interface MTNetworkAvailability : NSObject
{
    struct __SCNetworkReachability *_reachability;
    MTTimer *_timer;
    NSString *_lastReachabilityState;
    id <MTNetworkAvailabilityDelegate> _delegate;
}

+ (id)networkAvailabilityQueue;
@property(nonatomic) __weak id <MTNetworkAvailabilityDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)updateReachability:(unsigned int)arg1 notify:(_Bool)arg2;
- (void)updateFlags:(_Bool)arg1;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1;

@end

@interface MTNetworkUsageCalculationInfo : NSObject
{
    int _incomingWWANKey;
    int _outgoingWWANKey;
    int _incomingOtherKey;
    int _outgoingOtherKey;
    NSString *_filePath;
}

@property(readonly, nonatomic) int outgoingOtherKey; // @synthesize outgoingOtherKey=_outgoingOtherKey;
@property(readonly, nonatomic) int incomingOtherKey; // @synthesize incomingOtherKey=_incomingOtherKey;
@property(readonly, nonatomic) int outgoingWWANKey; // @synthesize outgoingWWANKey=_outgoingWWANKey;
@property(readonly, nonatomic) int incomingWWANKey; // @synthesize incomingWWANKey=_incomingWWANKey;
@property(readonly, nonatomic) NSString *filePath; // @synthesize filePath=_filePath;
- (void).cxx_destruct;
- (id)initWithFilePath:(id)arg1 incomingWWANKey:(int)arg2 outgoingWWANKey:(int)arg3 incomingOtherKey:(int)arg4 outgoingOtherKey:(int)arg5;

@end

@interface MTNetworkUsageManagerImpl : NSObject
{
    MTQueue *_queue;
    MTNetworkUsageCalculationInfo *_info;
    NSMutableDictionary *_pendingIncomingBytes;
    NSMutableDictionary *_pendingOutgoingBytes;
    MTTimer *_timer;
}

- (void).cxx_destruct;
- (id)currentStatsForKeys:(id)arg1;
- (void)resetKeys:(id)arg1 setKeys:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addOutgoingBytes:(unsigned long long)arg1 interface:(int)arg2;
- (void)addIncomingBytes:(unsigned long long)arg1 interface:(int)arg2;
- (void)sync;
- (void)scheduleSync;
- (void)dealloc;
- (id)initWithQueue:(id)arg1 info:(id)arg2;

@end

@interface MTNetworkUsageManagerImplHolder : NSObject
{
    _Bool _deallocated;
    void *_impl;
}

@property(nonatomic) _Bool deallocated; // @synthesize deallocated=_deallocated;
@property(nonatomic) void *impl; // @synthesize impl=_impl;

@end

@interface MTNetworkUsageManager : NSObject
{
    MTQueue *_queue;
    MTAtomic *_holder;
}

- (void).cxx_destruct;
- (id)currentStatsForKeys:(id)arg1;
- (void)resetKeys:(id)arg1 setKeys:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)addOutgoingBytes:(unsigned long long)arg1 interface:(int)arg2;
- (void)addIncomingBytes:(unsigned long long)arg1 interface:(int)arg2;
- (void)with:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithInfo:(id)arg1;

@end

@interface MTNewSessionCreatedMessage : NSObject
{
    long long _firstMessageId;
    long long _uniqueId;
    long long _serverSalt;
}

@property(readonly, nonatomic) long long serverSalt; // @synthesize serverSalt=_serverSalt;
@property(readonly, nonatomic) long long uniqueId; // @synthesize uniqueId=_uniqueId;
@property(readonly, nonatomic) long long firstMessageId; // @synthesize firstMessageId=_firstMessageId;
- (id)description;
- (id)initWithFirstMessageId:(long long)arg1 uniqueId:(long long)arg2 serverSalt:(long long)arg3;

@end

@interface MTOutgoingMessageInternalId : NSObject <NSCopying>
{
    unsigned long long _value;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)init;

@end

@interface MTOutgoingMessage : NSObject
{
    _Bool _requiresConfirmation;
    _Bool _needsQuickAck;
    _Bool _hasHighPriority;
    int _messageSeqNo;
    id _internalId;
    NSData *_data;
    id _metadata;
    NSString *_additionalDebugDescription;
    id _shortMetadata;
    long long _messageId;
    long long _inResponseToMessageId;
    CDUnknownBlockType _dynamicDecorator;
}

@property(copy, nonatomic) CDUnknownBlockType dynamicDecorator; // @synthesize dynamicDecorator=_dynamicDecorator;
@property(nonatomic) long long inResponseToMessageId; // @synthesize inResponseToMessageId=_inResponseToMessageId;
@property(nonatomic) _Bool hasHighPriority; // @synthesize hasHighPriority=_hasHighPriority;
@property(nonatomic) _Bool needsQuickAck; // @synthesize needsQuickAck=_needsQuickAck;
@property(nonatomic) _Bool requiresConfirmation; // @synthesize requiresConfirmation=_requiresConfirmation;
@property(readonly, nonatomic) int messageSeqNo; // @synthesize messageSeqNo=_messageSeqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
@property(readonly, nonatomic) id shortMetadata; // @synthesize shortMetadata=_shortMetadata;
@property(readonly, nonatomic) NSString *additionalDebugDescription; // @synthesize additionalDebugDescription=_additionalDebugDescription;
@property(readonly, nonatomic) id metadata; // @synthesize metadata=_metadata;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) id internalId; // @synthesize internalId=_internalId;
- (void).cxx_destruct;
- (id)initWithData:(id)arg1 metadata:(id)arg2 additionalDebugDescription:(id)arg3 shortMetadata:(id)arg4 messageId:(long long)arg5 messageSeqNo:(int)arg6;
- (id)initWithData:(id)arg1 metadata:(id)arg2 additionalDebugDescription:(id)arg3 shortMetadata:(id)arg4;

@end

@interface MTOutputStream : NSObject
{
    NSOutputStream *_wrappedOutputStream;
}

- (void).cxx_destruct;
- (void)writeBytes:(id)arg1;
- (void)writeString:(id)arg1;
- (void)writeData:(id)arg1;
- (void)writeDouble:(double)arg1;
- (void)writeInt64:(long long)arg1;
- (void)writeInt32:(int)arg1;
- (long long)write:(const char *)arg1 maxLength:(unsigned long long)arg2;
- (id)currentBytes;
- (void)dealloc;
- (id)wrappedOutputStream;
- (id)init;

@end

@interface MTPingMessage : NSObject
{
    long long _pingId;
}

@property(readonly, nonatomic) long long pingId; // @synthesize pingId=_pingId;
- (id)initWithPingId:(long long)arg1;

@end

@interface MTPongMessage : NSObject
{
    long long _messageId;
    long long _pingId;
}

@property(readonly, nonatomic) long long pingId; // @synthesize pingId=_pingId;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (id)initWithMessageId:(long long)arg1 pingId:(long long)arg2;

@end

@interface MTMTPreparedMessageInternalId : NSObject <NSCopying>
{
    unsigned long long _value;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)init;

@end

@interface MTPreparedMessage : NSObject
{
    _Bool _requiresConfirmation;
    _Bool _hasHighPriority;
    int _seqNo;
    id _internalId;
    long long _messageId;
    long long _salt;
    NSData *_data;
    long long _inResponseToMessageId;
}

@property(readonly, nonatomic) long long inResponseToMessageId; // @synthesize inResponseToMessageId=_inResponseToMessageId;
@property(readonly, nonatomic) _Bool hasHighPriority; // @synthesize hasHighPriority=_hasHighPriority;
@property(readonly, nonatomic) _Bool requiresConfirmation; // @synthesize requiresConfirmation=_requiresConfirmation;
@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) long long salt; // @synthesize salt=_salt;
@property(readonly, nonatomic) int seqNo; // @synthesize seqNo=_seqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
@property(readonly, nonatomic) id internalId; // @synthesize internalId=_internalId;
- (void).cxx_destruct;
- (id)initWithData:(id)arg1 messageId:(long long)arg2 seqNo:(int)arg3 salt:(long long)arg4 requiresConfirmation:(_Bool)arg5 hasHighPriority:(_Bool)arg6 inResponseToMessageId:(long long)arg7;
- (id)initWithData:(id)arg1 messageId:(long long)arg2 seqNo:(int)arg3 salt:(long long)arg4 requiresConfirmation:(_Bool)arg5 hasHighPriority:(_Bool)arg6;

@end

@interface MTProtoConnectionState : NSObject
{
    _Bool _isConnected;
    _Bool _proxyHasConnectionIssues;
    NSString *_proxyAddress;
}

@property(readonly, nonatomic) _Bool proxyHasConnectionIssues; // @synthesize proxyHasConnectionIssues=_proxyHasConnectionIssues;
@property(readonly, nonatomic) NSString *proxyAddress; // @synthesize proxyAddress=_proxyAddress;
@property(readonly, nonatomic) _Bool isConnected; // @synthesize isConnected=_isConnected;
- (void).cxx_destruct;
- (id)initWithIsConnected:(_Bool)arg1 proxyAddress:(id)arg2 proxyHasConnectionIssues:(_Bool)arg3;

@end

@interface MTProto : NSObject <MTContextChangeListener, MTTransportDelegate, MTTimeSyncMessageServiceDelegate, MTResendMessageServiceDelegate>
{
    NSMutableArray *_messageServices;
    MTDatacenterAuthInfo *_authInfo;
    MTSessionInfo *_sessionInfo;
    MTTimeFixContext *_timeFixContext;
    long long _bindingTempAuthKeyId;
    MTBindingTempAuthKeyContext *_bindingTempAuthKeyContext;
    MTTransport *_transport;
    int _mtState;
    _Bool _willRequestTransactionOnNextQueuePass;
    MTNetworkUsageCalculationInfo *_usageCalculationInfo;
    MTProtoConnectionState *_connectionState;
    _Bool _isProbing;
    MTMetaDisposable *_probingDisposable;
    NSNumber *_probingStatus;
    _Bool _shouldStayConnected;
    _Bool _useUnauthorizedMode;
    _Bool _useTempAuthKeys;
    _Bool _media;
    _Bool _enforceMedia;
    _Bool _cdn;
    _Bool _checkForProxyConnectionIssues;
    _Bool _canResetAuthData;
    id <MTProtoDelegate> _delegate;
    MTContext *_context;
    MTApiEnvironment *_apiEnvironment;
    long long _datacenterId;
    MTDatacenterAuthKey *_useExplicitAuthKey;
    CDUnknownBlockType _tempAuthKeyBindingResultUpdated;
    id _requiredAuthToken;
    long long _authTokenMasterDatacenterId;
}

+ (id)managerQueue;
@property(nonatomic) long long authTokenMasterDatacenterId; // @synthesize authTokenMasterDatacenterId=_authTokenMasterDatacenterId;
@property(retain, nonatomic) id requiredAuthToken; // @synthesize requiredAuthToken=_requiredAuthToken;
@property(nonatomic) _Bool canResetAuthData; // @synthesize canResetAuthData=_canResetAuthData;
@property(nonatomic) _Bool checkForProxyConnectionIssues; // @synthesize checkForProxyConnectionIssues=_checkForProxyConnectionIssues;
@property(nonatomic) _Bool cdn; // @synthesize cdn=_cdn;
@property(nonatomic) _Bool enforceMedia; // @synthesize enforceMedia=_enforceMedia;
@property(nonatomic) _Bool media; // @synthesize media=_media;
@property(nonatomic) _Bool useTempAuthKeys; // @synthesize useTempAuthKeys=_useTempAuthKeys;
@property(nonatomic) _Bool useUnauthorizedMode; // @synthesize useUnauthorizedMode=_useUnauthorizedMode;
@property(nonatomic) _Bool shouldStayConnected; // @synthesize shouldStayConnected=_shouldStayConnected;
@property(copy, nonatomic) CDUnknownBlockType tempAuthKeyBindingResultUpdated; // @synthesize tempAuthKeyBindingResultUpdated=_tempAuthKeyBindingResultUpdated;
@property(retain, nonatomic) MTDatacenterAuthKey *useExplicitAuthKey; // @synthesize useExplicitAuthKey=_useExplicitAuthKey;
@property(nonatomic) long long datacenterId; // @synthesize datacenterId=_datacenterId;
@property(readonly, nonatomic) MTApiEnvironment *apiEnvironment; // @synthesize apiEnvironment=_apiEnvironment;
@property(readonly, nonatomic) MTContext *context; // @synthesize context=_context;
@property(nonatomic) __weak id <MTProtoDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)bindToPersistentKey:(id)arg1;
- (void)contextApiEnvironmentUpdated:(id)arg1 apiEnvironment:(id)arg2;
- (void)contextDatacenterPublicKeysUpdated:(id)arg1 datacenterId:(long long)arg2 publicKeys:(id)arg3;
- (void)_messageResendRequestFailed:(long long)arg1;
- (void)timeSyncInfoChanged:(double)arg1 saltList:(id)arg2;
- (void)timeSyncServiceCompleted:(id)arg1 timeDifference:(double)arg2 saltList:(id)arg3;
- (void)contextDatacenterAuthTokenUpdated:(id)arg1 datacenterId:(long long)arg2 authToken:(id)arg3;
- (void)checkTempAuthKeyBinding:(id)arg1;
- (void)contextDatacenterAuthInfoUpdated:(id)arg1 datacenterId:(long long)arg2 authInfo:(id)arg3;
- (void)contextDatacenterTransportSchemesUpdated:(id)arg1 datacenterId:(long long)arg2 shouldReset:(_Bool)arg3;
- (void)_processIncomingMessage:(id)arg1 totalSize:(int)arg2 withTransactionId:(id)arg3 address:(id)arg4;
- (id)_parseIncomingMessages:(id)arg1 dataMessageId:(out long long *)arg2 parseError:(out _Bool *)arg3;
- (id)parseMessage:(id)arg1;
- (id)_decryptIncomingTransportData:(id)arg1 address:(id)arg2;
- (void)handleMissingKey:(id)arg1;
- (void)transportHasIncomingData:(id)arg1 scheme:(id)arg2 data:(id)arg3 transactionId:(id)arg4 requestTransactionAfterProcessing:(_Bool)arg5 decodeResult:(CDUnknownBlockType)arg6;
- (void)transportTransactionsSucceeded:(id)arg1;
- (void)transportUpdatedDataReceiveProgress:(id)arg1 progressToken:(id)arg2 packetLength:(long long)arg3 progress:(float)arg4;
- (void)findReqMsgId:(id)arg1 signature:(int)arg2 reqMsgId:(long long *)arg3 failed:(_Bool *)arg4;
- (void)transportDecodeProgressToken:(id)arg1 scheme:(id)arg2 data:(id)arg3 token:(long long)arg4 completion:(CDUnknownBlockType)arg5;
- (void)transportReceivedQuickAck:(id)arg1 quickAckId:(int)arg2;
- (void)allTransactionsMayHaveFailed;
- (void)transportTransactionsMayHaveFailed:(id)arg1 transactionIds:(id)arg2;
- (id)_dataForEncryptedMessage:(id)arg1 sessionInfo:(id)arg2 quickAckId:(int *)arg3 address:(id)arg4 extendedPadding:(_Bool)arg5;
- (id)_manuallyEncryptedMessage:(id)arg1 messageId:(long long)arg2 authKey:(id)arg3;
- (id)paddedData:(id)arg1 extendedPadding:(_Bool)arg2;
- (id)paddedDataV1:(id)arg1;
- (id)_dataForPlainMessage:(id)arg1 extendedPadding:(_Bool)arg2;
- (id)_dataForEncryptedContainerWithMessages:(id)arg1 sessionInfo:(id)arg2 quickAckId:(int *)arg3 address:(id)arg4 extendedPadding:(_Bool)arg5;
- (void)transportReadyForTransaction:(id)arg1 scheme:(id)arg2 transportSpecificTransaction:(id)arg3 forceConfirmations:(_Bool)arg4 transactionReady:(CDUnknownBlockType)arg5;
- (id)incomingMessageDescription:(id)arg1;
- (id)outgoingShortMessageDescription:(id)arg1 messageId:(long long)arg2 messageSeqNo:(int)arg3;
- (id)outgoingMessageDescription:(id)arg1 messageId:(long long)arg2 messageSeqNo:(int)arg3;
- (void)_updateConnectionIssuesStatus:(_Bool)arg1;
- (void)transportConnectionProblemsStatusChanged:(id)arg1 scheme:(id)arg2 hasConnectionProblems:(_Bool)arg3 isProbablyHttp:(_Bool)arg4;
- (void)transportConnectionContextUpdateStateChanged:(id)arg1 isUpdatingConnectionContext:(_Bool)arg2;
- (void)transportConnectionStateChanged:(id)arg1 isConnected:(_Bool)arg2 proxySettings:(id)arg3;
- (void)transportConnectionFailed:(id)arg1 scheme:(id)arg2;
- (void)transportNetworkAvailabilityChanged:(id)arg1 isNetworkAvailable:(_Bool)arg2;
- (_Bool)isPaused;
- (_Bool)isStopped;
- (_Bool)bindingTempAuthKey;
- (_Bool)timeFixOrSaltsMissing;
- (_Bool)canAskForServiceTransactions;
- (_Bool)canAskForTransactions;
- (void)requestSecureTransportReset;
- (void)requestTransportTransaction;
- (void)resendMessageServiceCompleted:(id)arg1;
- (void)requestMessageWithId:(long long)arg1;
- (void)completeTimeSync;
- (void)initiateTimeSync;
- (id)messageServiceQueue;
- (void)removeMessageService:(id)arg1;
- (void)addMessageService:(id)arg1;
- (void)setMtState:(int)arg1;
- (void)requestTimeResync;
- (void)finalizeSession;
- (void)resetSessionInfo;
- (void)resetTransport;
- (void)setTransport:(id)arg1;
- (void)updateConnectionState;
- (void)stop;
- (void)resume;
- (void)pause;
- (void)setUsageCalculationInfo:(id)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1 datacenterId:(long long)arg2 usageCalculationInfo:(id)arg3 requiredAuthToken:(id)arg4 authTokenMasterDatacenterId:(long long)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTProxyConnectivityStatus : NSObject
{
    _Bool _reachable;
    double _roundTripTime;
}

@property(readonly, nonatomic) double roundTripTime; // @synthesize roundTripTime=_roundTripTime;
@property(readonly, nonatomic) _Bool reachable; // @synthesize reachable=_reachable;
- (_Bool)isEqual:(id)arg1;
- (id)initWithReachable:(_Bool)arg1 roundTripTime:(double)arg2;

@end

@interface MTProxyConnectivity : NSObject
{
}

+ (id)pingProxyWithContext:(id)arg1 datacenterId:(long long)arg2 settings:(id)arg3;
+ (id)pingWithAddress:(id)arg1 datacenterId:(unsigned long long)arg2 settings:(id)arg3 context:(id)arg4;
+ (_Bool)isResponseValid:(id)arg1 payloadData:(CDStruct_60067b7e)arg2;

@end

@interface MTQueue : NSObject
{
    _Bool _isMainQueue;
    NSObject<OS_dispatch_queue> *_queue;
    const char *_name;
}

+ (id)concurrentLowQueue;
+ (id)concurrentDefaultQueue;
+ (id)mainQueue;
- (void).cxx_destruct;
- (void)dispatchOnQueue:(CDUnknownBlockType)arg1 synchronous:(_Bool)arg2;
- (void)dispatchOnQueue:(CDUnknownBlockType)arg1;
- (void)dispatch:(CDUnknownBlockType)arg1;
- (_Bool)isCurrentQueue;
- (id)nativeQueue;
- (void)dealloc;
- (id)initWithName:(const char *)arg1;
- (id)init;

@end

@interface MTRequestInternalId : NSObject <NSCopying>
{
    unsigned long long _value;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)init;

@end

@interface MTRequest : NSObject
{
    _Bool _hasHighPriority;
    _Bool _dependsOnPasswordEntry;
    _Bool _passthroughPasswordEntryError;
    int _transactionResetStateVersion;
    id _internalId;
    NSData *_payload;
    id _metadata;
    id _shortMetadata;
    CDUnknownBlockType _responseParser;
    NSArray *_decorators;
    MTRequestContext *_requestContext;
    MTRequestErrorContext *_errorContext;
    CDUnknownBlockType _completed;
    CDUnknownBlockType _progressUpdated;
    CDUnknownBlockType _acknowledgementReceived;
    CDUnknownBlockType _shouldContinueExecutionWithErrorContext;
    CDUnknownBlockType _shouldDependOnRequest;
}

@property(copy, nonatomic) CDUnknownBlockType shouldDependOnRequest; // @synthesize shouldDependOnRequest=_shouldDependOnRequest;
@property(copy, nonatomic) CDUnknownBlockType shouldContinueExecutionWithErrorContext; // @synthesize shouldContinueExecutionWithErrorContext=_shouldContinueExecutionWithErrorContext;
@property(copy, nonatomic) CDUnknownBlockType acknowledgementReceived; // @synthesize acknowledgementReceived=_acknowledgementReceived;
@property(copy, nonatomic) CDUnknownBlockType progressUpdated; // @synthesize progressUpdated=_progressUpdated;
@property(copy, nonatomic) CDUnknownBlockType completed; // @synthesize completed=_completed;
@property(nonatomic) _Bool passthroughPasswordEntryError; // @synthesize passthroughPasswordEntryError=_passthroughPasswordEntryError;
@property(nonatomic) _Bool dependsOnPasswordEntry; // @synthesize dependsOnPasswordEntry=_dependsOnPasswordEntry;
@property(nonatomic) _Bool hasHighPriority; // @synthesize hasHighPriority=_hasHighPriority;
@property(retain, nonatomic) MTRequestErrorContext *errorContext; // @synthesize errorContext=_errorContext;
@property(retain, nonatomic) MTRequestContext *requestContext; // @synthesize requestContext=_requestContext;
@property(nonatomic) int transactionResetStateVersion; // @synthesize transactionResetStateVersion=_transactionResetStateVersion;
@property(retain, nonatomic) NSArray *decorators; // @synthesize decorators=_decorators;
@property(readonly, nonatomic) CDUnknownBlockType responseParser; // @synthesize responseParser=_responseParser;
@property(readonly, nonatomic) id shortMetadata; // @synthesize shortMetadata=_shortMetadata;
@property(readonly, nonatomic) id metadata; // @synthesize metadata=_metadata;
@property(readonly, nonatomic) NSData *payload; // @synthesize payload=_payload;
@property(readonly, nonatomic) id internalId; // @synthesize internalId=_internalId;
- (void).cxx_destruct;
- (void)setPayload:(id)arg1 metadata:(id)arg2 shortMetadata:(id)arg3 responseParser:(CDUnknownBlockType)arg4;
- (id)init;

@end

@interface MTRequestContext : NSObject
{
    _Bool _waitingForMessageId;
    _Bool _delivered;
    _Bool _willInitializeApi;
    int _messageSeqNo;
    int _quickAckId;
    long long _messageId;
    id _transactionId;
    long long _responseMessageId;
}

@property(nonatomic) _Bool willInitializeApi; // @synthesize willInitializeApi=_willInitializeApi;
@property(nonatomic) long long responseMessageId; // @synthesize responseMessageId=_responseMessageId;
@property(nonatomic) _Bool delivered; // @synthesize delivered=_delivered;
@property(nonatomic) int quickAckId; // @synthesize quickAckId=_quickAckId;
@property(retain, nonatomic) id transactionId; // @synthesize transactionId=_transactionId;
@property(nonatomic) _Bool waitingForMessageId; // @synthesize waitingForMessageId=_waitingForMessageId;
@property(readonly, nonatomic) int messageSeqNo; // @synthesize messageSeqNo=_messageSeqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (id)initWithMessageId:(long long)arg1 messageSeqNo:(int)arg2 transactionId:(id)arg3 quickAckId:(int)arg4;

@end

@interface MTRequestErrorContext : NSObject
{
    _Bool _waitingForTokenExport;
    double _minimalExecuteTime;
    unsigned long long _internalServerErrorCount;
    unsigned long long _floodWaitSeconds;
}

@property(nonatomic) _Bool waitingForTokenExport; // @synthesize waitingForTokenExport=_waitingForTokenExport;
@property(nonatomic) unsigned long long floodWaitSeconds; // @synthesize floodWaitSeconds=_floodWaitSeconds;
@property(nonatomic) unsigned long long internalServerErrorCount; // @synthesize internalServerErrorCount=_internalServerErrorCount;
@property(nonatomic) double minimalExecuteTime; // @synthesize minimalExecuteTime=_minimalExecuteTime;

@end

@interface MTRequestMessageService : NSObject <MTMessageService>
{
    MTContext *_context;
    MTProto *_mtProto;
    MTQueue *_queue;
    id <MTSerialization> _serialization;
    NSMutableArray *_requests;
    NSMutableArray *_dropReponseContexts;
    MTTimer *_requestsServiceTimer;
    _Bool _forceBackgroundRequests;
    id <MTRequestMessageServiceDelegate> _delegate;
    MTApiEnvironment *_apiEnvironment;
    CDUnknownBlockType _didReceiveSoftAuthResetError;
}

@property(copy, nonatomic) CDUnknownBlockType didReceiveSoftAuthResetError; // @synthesize didReceiveSoftAuthResetError=_didReceiveSoftAuthResetError;
@property(nonatomic) _Bool forceBackgroundRequests; // @synthesize forceBackgroundRequests=_forceBackgroundRequests;
@property(retain, nonatomic) MTApiEnvironment *apiEnvironment; // @synthesize apiEnvironment=_apiEnvironment;
@property(nonatomic) __weak id <MTRequestMessageServiceDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)mtProtoAuthTokenUpdated:(id)arg1;
- (void)mtProtoServerDidChangeSession:(id)arg1 firstValidMessageId:(long long)arg2 otherValidMessageIds:(id)arg3;
- (void)mtProtoDidChangeSession:(id)arg1;
- (void)mtProto:(id)arg1 updateReceiveProgressForToken:(id)arg2 progress:(float)arg3 packetLength:(long long)arg4;
- (void)mtProto:(id)arg1 messageResendRequestFailed:(long long)arg2;
- (_Bool)mtProto:(id)arg1 shouldRequestMessageWithId:(long long)arg2 inResponseToMessageId:(long long)arg3 currentTransactionId:(id)arg4;
- (void)mtProtoAllTransactionsMayHaveFailed:(id)arg1;
- (void)mtProto:(id)arg1 transactionsMayHaveFailed:(id)arg2;
- (void)mtProto:(id)arg1 messageDeliveryFailed:(long long)arg2;
- (void)mtProto:(id)arg1 messageDeliveryConfirmed:(id)arg2;
- (void)mtProto:(id)arg1 receivedQuickAck:(int)arg2;
- (void)mtProto:(id)arg1 receivedMessage:(id)arg2;
- (id)mtProtoMessageTransaction:(id)arg1;
- (id)decorateRequestData:(id)arg1 initializeApi:(_Bool)arg2 unresolvedDependencyOnRequestInternalId:(id *)arg3 decoratedDebugDescription:(id *)arg4;
- (void)mtProtoApiEnvironmentUpdated:(id)arg1 apiEnvironment:(id)arg2;
- (void)mtProtoDidAddService:(id)arg1;
- (void)mtProtoWillAddService:(id)arg1;
- (void)requestTimerEvent;
- (void)updateRequestsTimer;
- (void)_contextIsPasswordRequiredUpdated:(id)arg1 datacenterId:(long long)arg2;
- (void)requestCount:(CDUnknownBlockType)arg1;
- (void)removeRequestByInternalId:(id)arg1 askForReconnectionOnDrop:(_Bool)arg2;
- (void)removeRequestByInternalId:(id)arg1;
- (void)addRequest:(id)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTResPqMessage : NSObject
{
    NSData *_nonce;
    NSData *_serverNonce;
    NSData *_pq;
    NSArray *_serverPublicKeyFingerprints;
}

@property(readonly, nonatomic) NSArray *serverPublicKeyFingerprints; // @synthesize serverPublicKeyFingerprints=_serverPublicKeyFingerprints;
@property(readonly, nonatomic) NSData *pq; // @synthesize pq=_pq;
@property(readonly, nonatomic) NSData *serverNonce; // @synthesize serverNonce=_serverNonce;
@property(readonly, nonatomic) NSData *nonce; // @synthesize nonce=_nonce;
- (void).cxx_destruct;
- (id)description;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 pq:(id)arg3 serverPublicKeyFingerprints:(id)arg4;

@end

@interface MTResendMessageService : NSObject <MTMessageService>
{
    long long _currentRequestMessageId;
    id _currentRequestTransactionId;
    long long _messageId;
    id <MTResendMessageServiceDelegate> _delegate;
}

@property(nonatomic) __weak id <MTResendMessageServiceDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (void)mtProto:(id)arg1 receivedMessage:(id)arg2;
- (void)mtProtoAllTransactionsMayHaveFailed:(id)arg1;
- (void)mtProto:(id)arg1 transactionsMayHaveFailed:(id)arg2;
- (void)mtProtoServerDidChangeSession:(id)arg1 firstValidMessageId:(long long)arg2 otherValidMessageIds:(id)arg3;
- (void)mtProtoDidChangeSession:(id)arg1;
- (void)mtProto:(id)arg1 messageDeliveryFailed:(long long)arg2;
- (id)mtProtoMessageTransaction:(id)arg1;
- (void)mtProtoDidAddService:(id)arg1;
- (id)initWithMessageId:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTRpcError : NSObject
{
    int _errorCode;
    NSString *_errorDescription;
}

@property(readonly, nonatomic) NSString *errorDescription; // @synthesize errorDescription=_errorDescription;
@property(readonly, nonatomic) int errorCode; // @synthesize errorCode=_errorCode;
- (void).cxx_destruct;
- (id)description;
- (id)initWithErrorCode:(int)arg1 errorDescription:(id)arg2;

@end

@interface MTRpcResultMessage : NSObject
{
    long long _requestMessageId;
    NSData *_data;
}

@property(readonly, nonatomic) NSData *data; // @synthesize data=_data;
@property(readonly, nonatomic) long long requestMessageId; // @synthesize requestMessageId=_requestMessageId;
- (void).cxx_destruct;
- (id)initWithRequestMessageId:(long long)arg1 data:(id)arg2;

@end

@interface MTRsa : NSObject
{
}

+ (id)decryptData:(id)arg1 publicKey:(id)arg2;
+ (id)decryptString:(id)arg1 publicKey:(id)arg2;
+ (id)encryptData:(id)arg1 publicKey:(id)arg2;
+ (id)encryptString:(id)arg1 publicKey:(id)arg2;
+ (id)decryptData:(id)arg1 privateKey:(id)arg2;
+ (id)decryptString:(id)arg1 privateKey:(id)arg2;
+ (id)decryptData:(id)arg1 withKeyRef:(struct __SecKey *)arg2;
+ (id)encryptData:(id)arg1 privateKey:(id)arg2;
+ (id)encryptString:(id)arg1 privateKey:(id)arg2;
+ (id)encryptData:(id)arg1 withKeyRef:(struct __SecKey *)arg2;
+ (struct __SecKey *)addPrivateKey:(id)arg1;
+ (struct __SecKey *)addPublicKey:(id)arg1;
+ (id)stripPrivateKeyHeader:(id)arg1;
+ (id)stripPublicKeyHeader:(id)arg1;

@end

@interface MTServerDhInnerDataMessage : NSObject
{
    int _g;
    int _serverTime;
    NSData *_nonce;
    NSData *_serverNonce;
    NSData *_dhPrime;
    NSData *_gA;
}

@property(readonly, nonatomic) int serverTime; // @synthesize serverTime=_serverTime;
@property(readonly, nonatomic) NSData *gA; // @synthesize gA=_gA;
@property(readonly, nonatomic) NSData *dhPrime; // @synthesize dhPrime=_dhPrime;
@property(readonly, nonatomic) int g; // @synthesize g=_g;
@property(readonly, nonatomic) NSData *serverNonce; // @synthesize serverNonce=_serverNonce;
@property(readonly, nonatomic) NSData *nonce; // @synthesize nonce=_nonce;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 g:(int)arg3 dhPrime:(id)arg4 gA:(id)arg5 serverTime:(int)arg6;

@end

@interface MTServerDhParamsMessage : NSObject
{
    NSData *_nonce;
    NSData *_serverNonce;
}

@property(readonly, nonatomic) NSData *serverNonce; // @synthesize serverNonce=_serverNonce;
@property(readonly, nonatomic) NSData *nonce; // @synthesize nonce=_nonce;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2;

@end

@interface MTServerDhParamsFailMessage : MTServerDhParamsMessage
{
    NSData *_nextNonceHash;
}

@property(readonly, nonatomic) NSData *nextNonceHash; // @synthesize nextNonceHash=_nextNonceHash;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 nextNonceHash:(id)arg3;

@end

@interface MTServerDhParamsOkMessage : MTServerDhParamsMessage
{
    NSData *_encryptedResponse;
}

@property(readonly, nonatomic) NSData *encryptedResponse; // @synthesize encryptedResponse=_encryptedResponse;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 encryptedResponse:(id)arg3;

@end

@interface MTScheduledMessageConfirmation : NSObject
{
    long long _messageId;
    long long _size;
    NSMutableArray *_transactionIds;
}

@property(retain, nonatomic) NSMutableArray *transactionIds; // @synthesize transactionIds=_transactionIds;
@property(nonatomic) long long size; // @synthesize size=_size;
@property(nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (_Bool)containedInTransactionId:(id)arg1;
- (void)addTransactionId:(id)arg1;
- (id)initWithMessageId:(long long)arg1 size:(long long)arg2;

@end

@interface MTSessionInfo : NSObject
{
    long long _sessionId;
    MTContext *_context;
    long long _lastClientMessageId;
    int _seqNo;
    long long _lastServerMessageId;
    NSMutableSet *_processedMessageIdsSet;
    NSMutableArray *_scheduledMessageConfirmations;
    NSMutableDictionary *_containerMessagesMappingDict;
    _Bool _scheduledForCleanup;
    _Bool _canBeDeleted;
}

@property(nonatomic) _Bool canBeDeleted; // @synthesize canBeDeleted=_canBeDeleted;
@property(nonatomic) _Bool scheduledForCleanup; // @synthesize scheduledForCleanup=_scheduledForCleanup;
- (void).cxx_destruct;
- (int)takeSeqNo:(_Bool)arg1;
- (id)messageIdsInContainersAfterMessageId:(long long)arg1;
- (id)messageIdsInContainer:(long long)arg1;
- (void)addContainerMessageIdMapping:(long long)arg1 childMessageIds:(id)arg2;
- (void)removeScheduledMessageConfirmationsWithTransactionIds:(id)arg1;
- (void)assignTransactionId:(id)arg1 toScheduledMessageConfirmationsWithIds:(id)arg2;
- (void)removeScheduledMessageConfirmationsWithIds:(id)arg1;
- (_Bool)scheduledMessageConfirmationsExceedSize:(long long)arg1 orCount:(unsigned long long)arg2;
- (id)scheduledMessageConfirmations;
- (void)scheduleMessageConfirmation:(long long)arg1 size:(long long)arg2;
- (void)setMessageProcessed:(long long)arg1;
- (_Bool)messageProcessed:(long long)arg1;
- (long long)generateServerMessageId;
- (long long)actualClientMessagId;
- (long long)generateClientMessageId:(_Bool *)arg1;
- (long long)sessionId;
- (id)initWithSessionId:(long long)arg1 context:(id)arg2;
- (id)initWithRandomSessionIdAndContext:(id)arg1;

@end

@interface MTSetClientDhParamsResponseMessage : NSObject
{
    NSData *_nonce;
    NSData *_serverNonce;
}

@property(readonly, nonatomic) NSData *serverNonce; // @synthesize serverNonce=_serverNonce;
@property(readonly, nonatomic) NSData *nonce; // @synthesize nonce=_nonce;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2;

@end

@interface MTSetClientDhParamsResponseOkMessage : MTSetClientDhParamsResponseMessage
{
    NSData *_nextNonceHash1;
}

@property(readonly, nonatomic) NSData *nextNonceHash1; // @synthesize nextNonceHash1=_nextNonceHash1;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 nextNonceHash1:(id)arg3;

@end

@interface MTSetClientDhParamsResponseRetryMessage : MTSetClientDhParamsResponseMessage
{
    NSData *_nextNonceHash2;
}

@property(readonly, nonatomic) NSData *nextNonceHash2; // @synthesize nextNonceHash2=_nextNonceHash2;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 nextNonceHash2:(id)arg3;

@end

@interface MTSetClientDhParamsResponseFailMessage : MTSetClientDhParamsResponseMessage
{
    NSData *_nextNonceHash3;
}

@property(readonly, nonatomic) NSData *nextNonceHash3; // @synthesize nextNonceHash3=_nextNonceHash3;
- (void).cxx_destruct;
- (id)initWithNonce:(id)arg1 serverNonce:(id)arg2 nextNonceHash3:(id)arg3;

@end

@interface MTSubscriberDisposable : NSObject <MTDisposable>
{
    MTSubscriber *_subscriber;
    id <MTDisposable> _disposable;
}

- (void).cxx_destruct;
- (void)dispose;
- (id)initWithSubscriber:(id)arg1 disposable:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTSignal_ValueContainer : NSObject
{
    id _value;
}

@property(readonly, nonatomic) id value; // @synthesize value=_value;
- (void).cxx_destruct;
- (id)initWithValue:(id)arg1;

@end

@interface MTSignalQueueState : NSObject <MTDisposable>
{
    int _lock;
    _Bool _executingSignal;
    _Bool _terminated;
    id <MTDisposable> _disposable;
    MTMetaDisposable *_currentDisposable;
    MTSubscriber *_subscriber;
    NSMutableArray *_queuedSignals;
    _Bool _queueMode;
}

- (void).cxx_destruct;
- (void)dispose;
- (void)beginCompletion;
- (void)headCompleted;
- (void)enqueueSignal:(id)arg1;
- (void)beginWithDisposable:(id)arg1;
- (id)initWithSubscriber:(id)arg1 queueMode:(_Bool)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTSignalCombineState : NSObject
{
    _Bool _error;
    NSDictionary *_latestValues;
    NSArray *_completedStatuses;
}

@property(nonatomic) _Bool error; // @synthesize error=_error;
@property(readonly, nonatomic) NSArray *completedStatuses; // @synthesize completedStatuses=_completedStatuses;
@property(readonly, nonatomic) NSDictionary *latestValues; // @synthesize latestValues=_latestValues;
- (void).cxx_destruct;
- (id)initWithLatestValues:(id)arg1 completedStatuses:(id)arg2 error:(_Bool)arg3;

@end

@interface MTSignal : NSObject
{
    CDUnknownBlockType _generator;
}

+ (id)mergeSignals:(id)arg1;
+ (id)combineSignals:(id)arg1 withInitialStates:(id)arg2;
+ (id)combineSignals:(id)arg1;
+ (id)complete;
+ (id)never;
+ (id)fail:(id)arg1;
+ (id)single:(id)arg1;
- (void).cxx_destruct;
- (id)reduceLeft:(id)arg1 with:(CDUnknownBlockType)arg2;
- (id)takeLast;
- (id)startOn:(id)arg1;
- (id)deliverOn:(id)arg1;
- (id)onDispose:(CDUnknownBlockType)arg1;
- (id)mapToSignal:(CDUnknownBlockType)arg1;
- (id)filter:(CDUnknownBlockType)arg1;
- (id)map:(CDUnknownBlockType)arg1;
- (id)switchToLatest;
- (id)take:(unsigned long long)arg1;
- (id)restart;
- (id)catch:(CDUnknownBlockType)arg1;
- (id)timeout:(double)arg1 onQueue:(id)arg2 orSignal:(id)arg3;
- (id)delay:(double)arg1 onQueue:(id)arg2;
- (id)then:(id)arg1;
- (id)startWithNext:(CDUnknownBlockType)arg1 completed:(CDUnknownBlockType)arg2;
- (id)startWithNext:(CDUnknownBlockType)arg1;
- (id)startWithNext:(CDUnknownBlockType)arg1 error:(CDUnknownBlockType)arg2 completed:(CDUnknownBlockType)arg3;
- (id)initWithGenerator:(CDUnknownBlockType)arg1;

@end

@interface MTPipeReplayState : NSObject
{
    _Bool _hasReceivedValue;
    id _recentValue;
}

@property(readonly, nonatomic) id recentValue; // @synthesize recentValue=_recentValue;
@property(readonly, nonatomic) _Bool hasReceivedValue; // @synthesize hasReceivedValue=_hasReceivedValue;
- (void).cxx_destruct;
- (id)initWithReceivedValue:(_Bool)arg1 recentValue:(id)arg2;

@end

@interface MTPipe : NSObject
{
    CDUnknownBlockType _signalProducer;
    CDUnknownBlockType _sink;
}

@property(readonly, copy, nonatomic) CDUnknownBlockType sink; // @synthesize sink=_sink;
@property(readonly, copy, nonatomic) CDUnknownBlockType signalProducer; // @synthesize signalProducer=_signalProducer;
- (void).cxx_destruct;
- (id)initWithReplay:(_Bool)arg1;
- (id)init;

@end

@interface MTSubscriberBlocks : NSObject
{
    CDUnknownBlockType _next;
    CDUnknownBlockType _error;
    CDUnknownBlockType _completed;
}

- (void).cxx_destruct;
- (id)initWithNext:(CDUnknownBlockType)arg1 error:(CDUnknownBlockType)arg2 completed:(CDUnknownBlockType)arg3;

@end

@interface MTSubscriber : NSObject <MTDisposable>
{
    int _lock;
    _Bool _terminated;
    id <MTDisposable> _disposable;
    MTSubscriberBlocks *_blocks;
}

- (void).cxx_destruct;
- (void)dispose;
- (void)putCompletion;
- (void)putError:(id)arg1;
- (void)putNext:(id)arg1;
- (void)_markTerminatedWithoutDisposal;
- (void)_assignDisposable:(id)arg1;
- (id)initWithNext:(CDUnknownBlockType)arg1 error:(CDUnknownBlockType)arg2 completed:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTTcpConnectionData : NSObject
{
    _Bool _isSocks;
    int _port;
    NSString *_ip;
}

@property(readonly, nonatomic) _Bool isSocks; // @synthesize isSocks=_isSocks;
@property(readonly, nonatomic) int port; // @synthesize port=_port;
@property(readonly, nonatomic) NSString *ip; // @synthesize ip=_ip;
- (void).cxx_destruct;
- (id)initWithIp:(id)arg1 port:(int)arg2 isSocks:(_Bool)arg3;

@end

@interface MTMTTcpConnectionInternalId : NSObject <NSCopying>
{
    unsigned long long _value;
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)init;

@end

@interface MTTcpSendData : NSObject
{
    _Bool _requestQuickAck;
    _Bool _expectDataInResponse;
    NSArray *_dataSet;
    CDUnknownBlockType _completion;
}

@property(readonly, nonatomic) _Bool expectDataInResponse; // @synthesize expectDataInResponse=_expectDataInResponse;
@property(readonly, nonatomic) _Bool requestQuickAck; // @synthesize requestQuickAck=_requestQuickAck;
@property(readonly, copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
@property(readonly, nonatomic) NSArray *dataSet; // @synthesize dataSet=_dataSet;
- (void).cxx_destruct;
- (id)initWithDataSet:(id)arg1 completion:(CDUnknownBlockType)arg2 requestQuickAck:(_Bool)arg3 expectDataInResponse:(_Bool)arg4;

@end

@interface MTTcpReceiveData : NSObject
{
    int _tag;
    int _length;
}

@property(readonly, nonatomic) int length; // @synthesize length=_length;
@property(readonly, nonatomic) int tag; // @synthesize tag=_tag;
- (id)initWithTag:(int)arg1 length:(int)arg2;

@end

@interface MTTcpConnection : NSObject <GCDAsyncSocketDelegate>
{
    id <EncryptionProvider> _encryptionProvider;
    GCDAsyncSocket *_socket;
    _Bool _closed;
    _Bool _useIntermediateFormat;
    int _datacenterTag;
    unsigned char _quickAckByte;
    MTTimer *_responseTimeoutTimer;
    _Bool _readingPartialData;
    NSData *_packetHead;
    unsigned long long _packetRestLength;
    unsigned long long _packetRestReceivedLength;
    _Bool _delegateImplementsProgressUpdated;
    NSData *_firstPacketControlByte;
    _Bool _addedControlHeader;
    _Bool _addedHelloHeader;
    MTAesCtr *_outgoingAesCtr;
    MTAesCtr *_incomingAesCtr;
    MTNetworkUsageCalculationInfo *_usageCalculationInfo;
    NSString *_socksIp;
    int _socksPort;
    NSString *_socksUsername;
    NSString *_socksPassword;
    NSString *_mtpIp;
    int _mtpPort;
    MTProxySecret *_mtpSecret;
    NSData *_helloRandom;
    NSData *_currentHelloResponse;
    MTMetaDisposable *_resolveDisposable;
    _Bool _readyToSendData;
    NSMutableArray *_pendingDataQueue;
    NSMutableData *_receivedDataBuffer;
    MTTcpReceiveData *_pendingReceiveData;
    id <MTTcpConnectionDelegate> _delegate;
    CDUnknownBlockType _connectionOpened;
    CDUnknownBlockType _connectionClosed;
    CDUnknownBlockType _connectionReceivedData;
    id _internalId;
    MTTransportScheme *_scheme;
    NSString *_interface;
    long long _packetHeadDecodeToken;
    id _packetProgressToken;
}

+ (id)tcpQueue;
@property(retain, nonatomic) id packetProgressToken; // @synthesize packetProgressToken=_packetProgressToken;
@property(nonatomic) long long packetHeadDecodeToken; // @synthesize packetHeadDecodeToken=_packetHeadDecodeToken;
@property(readonly, nonatomic) NSString *interface; // @synthesize interface=_interface;
@property(readonly, nonatomic) MTTransportScheme *scheme; // @synthesize scheme=_scheme;
@property(readonly, nonatomic) id internalId; // @synthesize internalId=_internalId;
@property(copy, nonatomic) CDUnknownBlockType connectionReceivedData; // @synthesize connectionReceivedData=_connectionReceivedData;
@property(copy, nonatomic) CDUnknownBlockType connectionClosed; // @synthesize connectionClosed=_connectionClosed;
@property(copy, nonatomic) CDUnknownBlockType connectionOpened; // @synthesize connectionOpened=_connectionOpened;
@property(nonatomic) __weak id <MTTcpConnectionDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
- (void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)processReceivedData:(id)arg1 tag:(int)arg2;
- (void)addReadData:(id)arg1;
- (void)requestReadDataWithLength:(int)arg1 tag:(int)arg2;
- (void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long long)arg3;
- (void)requestSocksConnection;
- (void)socket:(id)arg1 didReadPartialDataOfLength:(unsigned long long)arg2 tag:(long long)arg3;
- (void)responseTimeout;
- (void)sendDatas:(id)arg1 completion:(CDUnknownBlockType)arg2 requestQuickAck:(_Bool)arg3 expectDataInResponse:(_Bool)arg4;
- (void)sendDataIfNeeded;
- (void)closeAndNotifyWithError:(_Bool)arg1;
- (void)stop;
- (void)start;
- (void)setUsageCalculationInfo:(id)arg1;
- (void)dealloc;
- (id)initWithContext:(id)arg1 datacenterId:(long long)arg2 scheme:(id)arg3 interface:(id)arg4 usageCalculationInfo:(id)arg5;

@end

@interface MTTcpConnectionBehaviour : NSObject
{
    MTTimer *_backoffTimer;
    long long _backoffCount;
    _Bool _needsReconnection;
    id <MTTcpConnectionBehaviourDelegate> _delegate;
    MTQueue *_queue;
}

@property(nonatomic) _Bool needsReconnection; // @synthesize needsReconnection=_needsReconnection;
@property(readonly, nonatomic) MTQueue *queue; // @synthesize queue=_queue;
@property(nonatomic) __weak id <MTTcpConnectionBehaviourDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)timerEvent:(_Bool)arg1;
- (void)startTimer:(double)arg1;
- (void)invalidateTimer;
- (void)clearBackoff;
- (void)connectionClosed;
- (void)connectionValidDataReceived;
- (void)connectionOpened;
- (void)requestConnection;
- (void)dealloc;
- (id)initWithQueue:(id)arg1;

@end

@interface MTTcpTransportContext : NSObject
{
    _Bool _connectionConnected;
    _Bool _connectionIsValid;
    _Bool _stopped;
    _Bool _isNetworkAvailable;
    _Bool _willRequestTransactionOnNextQueuePass;
    _Bool _isWaitingForTransactionToBecomeReady;
    _Bool _requestAnotherTransactionWhenReady;
    _Bool _didSendActualizationPingAfterConnection;
    NSArray *_schemes;
    MTTcpConnection *_connection;
    MTSocksProxySettings *_proxySettings;
    MTTcpConnectionBehaviour *_connectionBehaviour;
    double _transactionLockTime;
    long long _currentActualizationPingMessageId;
    MTTimer *_actualizationPingResendTimer;
    MTTimer *_connectionWatchdogTimer;
    MTTimer *_sleepWatchdogTimer;
    double _sleepWatchdogTimerLastTime;
}

@property(nonatomic) double sleepWatchdogTimerLastTime; // @synthesize sleepWatchdogTimerLastTime=_sleepWatchdogTimerLastTime;
@property(retain, nonatomic) MTTimer *sleepWatchdogTimer; // @synthesize sleepWatchdogTimer=_sleepWatchdogTimer;
@property(retain, nonatomic) MTTimer *connectionWatchdogTimer; // @synthesize connectionWatchdogTimer=_connectionWatchdogTimer;
@property(retain, nonatomic) MTTimer *actualizationPingResendTimer; // @synthesize actualizationPingResendTimer=_actualizationPingResendTimer;
@property(nonatomic) long long currentActualizationPingMessageId; // @synthesize currentActualizationPingMessageId=_currentActualizationPingMessageId;
@property(nonatomic) _Bool didSendActualizationPingAfterConnection; // @synthesize didSendActualizationPingAfterConnection=_didSendActualizationPingAfterConnection;
@property(nonatomic) _Bool requestAnotherTransactionWhenReady; // @synthesize requestAnotherTransactionWhenReady=_requestAnotherTransactionWhenReady;
@property(nonatomic) _Bool isWaitingForTransactionToBecomeReady; // @synthesize isWaitingForTransactionToBecomeReady=_isWaitingForTransactionToBecomeReady;
@property(nonatomic) double transactionLockTime; // @synthesize transactionLockTime=_transactionLockTime;
@property(nonatomic) _Bool willRequestTransactionOnNextQueuePass; // @synthesize willRequestTransactionOnNextQueuePass=_willRequestTransactionOnNextQueuePass;
@property(nonatomic) _Bool isNetworkAvailable; // @synthesize isNetworkAvailable=_isNetworkAvailable;
@property(nonatomic) _Bool stopped; // @synthesize stopped=_stopped;
@property(retain, nonatomic) MTTcpConnectionBehaviour *connectionBehaviour; // @synthesize connectionBehaviour=_connectionBehaviour;
@property(nonatomic) _Bool connectionIsValid; // @synthesize connectionIsValid=_connectionIsValid;
@property(nonatomic) _Bool connectionConnected; // @synthesize connectionConnected=_connectionConnected;
@property(retain, nonatomic) MTSocksProxySettings *proxySettings; // @synthesize proxySettings=_proxySettings;
@property(retain, nonatomic) MTTcpConnection *connection; // @synthesize connection=_connection;
@property(retain, nonatomic) NSArray *schemes; // @synthesize schemes=_schemes;
- (void).cxx_destruct;

@end

@interface MTTcpTransport : MTTransport <MTTcpConnectionDelegate, MTTcpConnectionBehaviourDelegate>
{
    MTTcpTransportContext *_transportContext;
    MTContext *_context;
    long long _datacenterId;
    MTNetworkUsageCalculationInfo *_usageCalculationInfo;
}

+ (id)tcpTransportQueue;
- (void).cxx_destruct;
- (void)updateSchemes:(id)arg1;
- (void)mtProto:(id)arg1 messageDeliveryFailed:(long long)arg2;
- (void)mtProto:(id)arg1 receivedMessage:(id)arg2;
- (void)mtProtoServerDidChangeSession:(id)arg1 firstValidMessageId:(long long)arg2 otherValidMessageIds:(id)arg3;
- (void)mtProtoDidChangeSession:(id)arg1;
- (void)_networkAvailabilityChanged:(_Bool)arg1;
- (void)activeTransactionIds:(CDUnknownBlockType)arg1;
- (void)_requestTransactionFromDelegate;
- (void)tcpConnectionBehaviourRequestsReconnection:(id)arg1 error:(_Bool)arg2;
- (void)tcpConnectionProgressUpdated:(id)arg1 packetProgressToken:(id)arg2 packetLength:(unsigned long long)arg3 progress:(float)arg4;
- (void)tcpConnectionDecodePacketProgressToken:(id)arg1 data:(id)arg2 token:(long long)arg3 completion:(CDUnknownBlockType)arg4;
- (void)tcpConnectionReceivedQuickAck:(id)arg1 quickAck:(int)arg2;
- (void)connectionIsInvalid;
- (void)connectionIsValid:(id)arg1;
- (void)tcpConnectionReceivedData:(id)arg1 data:(id)arg2;
- (void)tcpConnectionClosed:(id)arg1 error:(_Bool)arg2;
- (void)tcpConnectionOpened:(id)arg1;
- (void)resendActualizationPing;
- (void)stopActualizationPingResendTimer;
- (void)startActualizationPingResendTimer;
- (void)connectionWatchdogTimeout:(id)arg1;
- (void)stopConnectionWatchdogTimer;
- (void)startConnectionWatchdogTimer:(id)arg1;
- (void)stopSleepWatchdogTimer;
- (void)restartSleepWatchdogTimer;
- (void)startSleepWatchdogTimer;
- (void)stop;
- (void)reset;
- (void)startIfNeeded;
- (void)setDelegateNeedsTransaction;
- (void)updateConnectionState;
- (_Bool)needsParityCorrection;
- (void)setUsageCalculationInfo:(id)arg1;
- (void)dealloc;
- (id)initWithDelegate:(id)arg1 context:(id)arg2 datacenterId:(long long)arg3 schemes:(id)arg4 proxySettings:(id)arg5 usageCalculationInfo:(id)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTTimeFixContext : NSObject
{
    int _messageSeqNo;
    long long _messageId;
    id _transactionId;
    double _timeFixAbsoluteStartTime;
}

@property(readonly, nonatomic) double timeFixAbsoluteStartTime; // @synthesize timeFixAbsoluteStartTime=_timeFixAbsoluteStartTime;
@property(readonly, nonatomic) id transactionId; // @synthesize transactionId=_transactionId;
@property(readonly, nonatomic) int messageSeqNo; // @synthesize messageSeqNo=_messageSeqNo;
@property(readonly, nonatomic) long long messageId; // @synthesize messageId=_messageId;
- (void).cxx_destruct;
- (id)initWithMessageId:(long long)arg1 messageSeqNo:(int)arg2 transactionId:(id)arg3 timeFixAbsoluteStartTime:(double)arg4;

@end

@interface MTTimeSyncMessageService : NSObject <MTMessageService>
{
    long long _currentMessageId;
    id _currentTransactionId;
    double _currentSampleAbsoluteStartTime;
    unsigned long long _takenSampleCount;
    unsigned long long _requiredSampleCount;
    NSMutableArray *_takenSamples;
    NSMutableArray *_futureSalts;
    id <MTTimeSyncMessageServiceDelegate> _delegate;
}

@property(nonatomic) __weak id <MTTimeSyncMessageServiceDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)mtProto:(id)arg1 receivedMessage:(id)arg2;
- (void)mtProtoServerDidChangeSession:(id)arg1 firstValidMessageId:(long long)arg2 messageIdsInFirstValidContainer:(id)arg3;
- (void)mtProtoDidChangeSession:(id)arg1;
- (void)mtProtoAllTransactionsMayHaveFailed:(id)arg1;
- (void)mtProto:(id)arg1 transactionsMayHaveFailed:(id)arg2;
- (void)mtProto:(id)arg1 messageDeliveryFailed:(long long)arg2;
- (id)mtProtoMessageTransaction:(id)arg1;
- (void)mtProtoDidAddService:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTTimer : NSObject
{
    _Bool _repeat;
    double _timeoutDate;
    NSObject<OS_dispatch_source> *_timer;
    double _timeout;
    CDUnknownBlockType _completion;
    NSObject<OS_dispatch_queue> *_queue;
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
@property(nonatomic) _Bool repeat; // @synthesize repeat=_repeat;
@property(nonatomic) double timeout; // @synthesize timeout=_timeout;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *timer; // @synthesize timer=_timer;
@property(nonatomic) double timeoutDate; // @synthesize timeoutDate=_timeoutDate;
- (void).cxx_destruct;
- (double)remainingTime;
- (void)resetTimeout:(double)arg1;
- (_Bool)isScheduled;
- (void)invalidate;
- (void)fireAndInvalidate;
- (void)start;
- (void)dealloc;
- (id)initWithTimeout:(double)arg1 repeat:(_Bool)arg2 completion:(CDUnknownBlockType)arg3 queue:(id)arg4;

@end

@interface MTTransport : NSObject <MTNetworkAvailabilityDelegate, MTMessageService>
{
    MTNetworkAvailability *_networkAvailability;
    _Bool _simultaneousTransactionsEnabled;
    _Bool _reportTransportConnectionContextUpdateStates;
    id <MTTransportDelegate> _delegate;
    MTContext *_context;
    long long _datacenterId;
    MTSocksProxySettings *_proxySettings;
}

@property(nonatomic) _Bool reportTransportConnectionContextUpdateStates; // @synthesize reportTransportConnectionContextUpdateStates=_reportTransportConnectionContextUpdateStates;
@property(nonatomic) _Bool simultaneousTransactionsEnabled; // @synthesize simultaneousTransactionsEnabled=_simultaneousTransactionsEnabled;
@property(readonly, nonatomic) MTSocksProxySettings *proxySettings; // @synthesize proxySettings=_proxySettings;
@property(readonly, nonatomic) long long datacenterId; // @synthesize datacenterId=_datacenterId;
@property(readonly, nonatomic) MTContext *context; // @synthesize context=_context;
@property(nonatomic) __weak id <MTTransportDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)updateSchemes:(id)arg1;
- (void)incomingMessageDecoded:(id)arg1;
- (void)activeTransactionIds:(CDUnknownBlockType)arg1;
- (void)_networkAvailabilityChanged:(_Bool)arg1;
- (void)networkAvailabilityChanged:(id)arg1 networkIsAvailable:(_Bool)arg2;
- (void)_processIncomingData:(id)arg1 scheme:(id)arg2 transactionId:(id)arg3 requestTransactionAfterProcessing:(_Bool)arg4 decodeResult:(CDUnknownBlockType)arg5;
- (void)setDelegateNeedsTransaction;
- (void)updateConnectionState;
- (void)stop;
- (void)reset;
- (_Bool)needsParityCorrection;
- (void)setUsageCalculationInfo:(id)arg1;
- (id)initWithDelegate:(id)arg1 context:(id)arg2 datacenterId:(long long)arg3 schemes:(id)arg4 proxySettings:(id)arg5 usageCalculationInfo:(id)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface MTTransportScheme : NSObject <NSCoding>
{
    _Bool _media;
    Class _transportClass;
    MTDatacenterAddress *_address;
}

@property(readonly, nonatomic) _Bool media; // @synthesize media=_media;
@property(readonly, nonatomic) MTDatacenterAddress *address; // @synthesize address=_address;
@property(readonly, nonatomic) Class transportClass; // @synthesize transportClass=_transportClass;
- (void).cxx_destruct;
- (id)description;
- (long long)compareToScheme:(id)arg1;
- (_Bool)isOptimal;
- (_Bool)isEqualToScheme:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithTransportClass:(Class)arg1 address:(id)arg2 media:(_Bool)arg3;

@end

@interface MTTransportSchemeStats : NSObject <NSCoding>
{
    int _lastFailureTimestamp;
    int _lastResponseTimestamp;
}

+ (id)formatStats:(id)arg1;
@property(readonly, nonatomic) int lastResponseTimestamp; // @synthesize lastResponseTimestamp=_lastResponseTimestamp;
@property(readonly, nonatomic) int lastFailureTimestamp; // @synthesize lastFailureTimestamp=_lastFailureTimestamp;
- (id)description;
- (id)withUpdatedLastResponseTimestamp:(int)arg1;
- (id)withUpdatedLastFailureTimestamp:(int)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithLastFailureTimestamp:(int)arg1 lastResponseTimestamp:(int)arg2;

@end

@interface MTTransportTransaction : NSObject
{
    _Bool _expectsDataInResponse;
    _Bool _needsQuickAck;
    CDUnknownBlockType _completion;
    NSData *_payload;
}

@property(readonly, nonatomic) _Bool needsQuickAck; // @synthesize needsQuickAck=_needsQuickAck;
@property(readonly, nonatomic) _Bool expectsDataInResponse; // @synthesize expectsDataInResponse=_expectsDataInResponse;
@property(readonly, nonatomic) NSData *payload; // @synthesize payload=_payload;
@property(readonly, copy, nonatomic) CDUnknownBlockType completion; // @synthesize completion=_completion;
- (void).cxx_destruct;
- (id)initWithPayload:(id)arg1 completion:(CDUnknownBlockType)arg2 needsQuickAck:(_Bool)arg3 expectsDataInResponse:(_Bool)arg4;
- (id)initWithPayload:(id)arg1 completion:(CDUnknownBlockType)arg2;

@end

@interface PingFoundation : NSObject
{
    _Bool _nextSequenceNumberHasWrapped;
    unsigned short _identifier;
    unsigned short _nextSequenceNumber;
    NSString *_hostName;
    id <PingFoundationDelegate> _delegate;
    long long _addressStyle;
    NSData *_hostAddress;
    struct __CFHost *_host;
    struct __CFSocket *_socket;
}

+ (unsigned long long)icmpHeaderOffsetInIPv4Packet:(id)arg1;
@property(retain, nonatomic) struct __CFSocket *socket; // @synthesize socket=_socket;
@property(retain, nonatomic) struct __CFHost *host; // @synthesize host=_host;
@property(nonatomic) _Bool nextSequenceNumberHasWrapped; // @synthesize nextSequenceNumberHasWrapped=_nextSequenceNumberHasWrapped;
@property(nonatomic) unsigned short nextSequenceNumber; // @synthesize nextSequenceNumber=_nextSequenceNumber;
@property(readonly, nonatomic) unsigned short identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSData *hostAddress; // @synthesize hostAddress=_hostAddress;
@property(nonatomic) long long addressStyle; // @synthesize addressStyle=_addressStyle;
@property(nonatomic) __weak id <PingFoundationDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, copy, nonatomic) NSString *hostName; // @synthesize hostName=_hostName;
- (void).cxx_destruct;
- (void)stop;
- (void)stopSocket;
- (void)stopHostResolution;
- (void)start;
- (void)hostResolutionDone;
- (void)startWithHostAddress;
- (void)readData;
- (_Bool)validatePingResponsePacket:(id)arg1 sequenceNumber:(unsigned short *)arg2;
- (_Bool)validatePing6ResponsePacket:(id)arg1 sequenceNumber:(unsigned short *)arg2;
- (_Bool)validatePing4ResponsePacket:(id)arg1 sequenceNumber:(unsigned short *)arg2;
- (_Bool)validateSequenceNumber:(unsigned short)arg1;
- (void)sendPingWithData:(id)arg1;
- (id)pingPacketWithType:(unsigned char)arg1 payload:(id)arg2 requiresChecksum:(_Bool)arg3;
- (void)didFailWithHostStreamError:(CDStruct_87dc826d)arg1;
- (void)didFailWithError:(id)arg1;
@property(readonly, nonatomic) unsigned char hostAddressFamily;
- (void)dealloc;
- (id)initWithHostName:(id)arg1;

@end

